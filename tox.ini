# It would be nice to merge this into pyproject.toml, unfortunately as of 4.23.2 they don't support generative environments when using TOML

[tox]
skipsdist = True
skip_missing_interpreters = True
envlist =
    clean
    ansible{2.15}-py{39,310,311}-{with_constraints,without_constraints}
    ansible{2.16,2.17}-py{310,311,312}-{with_constraints,without_constraints}
    ansible{2.18}-py{311,312,313}-{with_constraints,without_constraints}
    linters

[common]
format_dirs = {toxinidir}/plugins {toxinidir}/tests
lint_dirs = {toxinidir}/plugins
ansible_desc =
    ansible2.15: Ansible-core 2.15
    ansible2.16: Ansible-core 2.16
    ansible2.17: Ansible-core 2.17
    ansible2.18: Ansible-core 2.18
const_desc =
    with_constraints: (With boto3/botocore constraints)
collection_path = ansible_collections/community/aws
collection_name = community.aws
[mypy]
mypy_path = {envtmpdir}/mypy
full_tmp_path = {[mypy]mypy_path}/{[common]collection_path}
[pyright]
pyright_path = {envtmpdir}/pyright
full_tmp_path = {[mypy]pyright_path}/{[common]collection_path}
[ansible-sanity]
sanity_tmp_path = {envtmpdir}/ansible-sanity
full_tmp_path = {[ansible-sanity]sanity_tmp_path}/{[common]collection_path}


[testenv]
description = Run the unit tests {[common]ansible_desc}/{base_python} {[common]const_desc}
labels = unit
deps =
  pytest
  pytest-cov
  pytest-ansible
  -rtest-requirements.txt
  ansible2.15: ansible-core>2.15,<2.16
  ansible2.16: ansible-core>2.16,<2.17
  ansible2.17: ansible-core>2.17,<2.18
  ansible2.18: ansible-core>2.18,<2.19
  with_constraints: -rtests/unit/constraints.txt
commands =
    pytest \
        --cov-report html \
        --cov plugins/callback \
        --cov plugins/inventory \
        --cov plugins/lookup \
        --cov plugins/module_utils \
        --cov plugins/modules \
        --cov plugins/plugin_utils \
        --cov plugins \
        --ansible-host-pattern localhost \
        {posargs:tests/}

[testenv:clean]
description = Remove coverage test data
deps = coverage
skip_install = true
commands =
    coverage erase

[testenv:complexity-report]
labels = lint
description = Generate a HTML complexity report in the complexity directory
deps =
  flake8-pyproject
  flake8-html
commands =
    -flake8 \
        --select C90 \
        --max-complexity 10 \
        --format=html \
        --htmldir={posargs:complexity} \
        {posargs:{[common]lint_dirs}}

[testenv:ansible-lint]
labels = lint
description = Run ansible-lint
deps =
  ansible-lint >= 24.7.0
commands =
  ansible-lint {posargs:{[common]lint_dirs}}

[testenv:black]
labels = format
description = Apply "black" formatting
depends =
  flynt, isort
deps =
  black >=23.0, <24.0
commands =
  black {posargs:{[common]format_dirs}}

[testenv:black-lint]
labels = lint
description = Lint against "black" formatting standards
deps =
  {[testenv:black]deps}
commands =
  black -v --check --diff {posargs:{[common]format_dirs}}

[testenv:isort]
labels = format
description = Sort imports
deps =
  isort
commands =
  isort {posargs:{[common]format_dirs}}

[testenv:isort-lint]
labels = lint
description = Lint for import sorting
deps =
  {[testenv:isort]deps}
commands =
  isort --check-only --diff {posargs:{[common]format_dirs}}

[testenv:flynt]
labels = format
description = Apply flint (f-string) formatting
deps =
  flynt
commands =
  flynt {posargs:{[common]format_dirs}}

[testenv:flynt-lint]
labels = lint
description = Run flint (f-string) linting
deps =
  flynt
commands =
  flynt --dry-run --fail-on-change {posargs:{[common]format_dirs}}

[testenv:flake8-lint]
labels = lint
description = Run FLAKE8 linting
deps =
  flake8
  flake8-pyproject
commands =
  flake8 {posargs:{[common]format_dirs}}

[testenv:pylint-lint]
labels = future-lint
description = Run pylint tests that are disabled by the default Ansible sanity tests
deps =
  pylint
commands =
  pylint \
    --disable R,C,W,E \
    --enable consider-using-dict-items,assignment-from-no-return,no-else-continue,no-else-break,simplifiable-if-statement,pointless-string-statement,redefined-outer-name,redefined-builtin \
    {posargs:{[common]lint_dirs}}

[testenv:ansible-sanity]
allowlist_externals = echo,cd,rm,mkdir,ln,ls
labels = future-lint
description = Run latest Ansible sanity tests
# ansible-sanity expects us to be installed into ansible_collections/community/aws
# by default we're checked out into community.aws
commands_pre =
  rm -rf {[ansible-sanity]sanity_tmp_path}
  mkdir -p {[ansible-sanity]full_tmp_path}
  rm -d {[ansible-sanity]full_tmp_path}
  ln -s {toxinidir} {[ansible-sanity]full_tmp_path}
deps =
  git+https://github.com/ansible/ansible.git@devel
  shellcheck-py
commands =
  cd {[ansible-sanity]full_tmp_path}
  ansible-test sanity

[testenv:mypy-lint]
allowlist_externals = echo,cd,rm,mkdir,ln
labels = future-lint
description = Run mypi type tests
set_env =
  MYPYPATH={envtmpdir}/mypy
deps =
  mypy
  # ansible-core
  git+https://github.com/ansible/ansible.git@devel
  botocore
  boto3
  placebo
  typing_extensions
commands_pre =
  rm -rf {[mypy]mypy_path}
  mkdir -p {[mypy]full_tmp_path}
  rm -d {[mypy]full_tmp_path}
  ln -s {toxinidir} {[mypy]full_tmp_path}
  ansible-galaxy collection install -p {[mypy]mypy_path}/ansible_collections git+https://github.com/ansible-collections/amazon.aws.git,main
commands =
  cd {[mypy]full_tmp_path}
  mypy \
    --namespace-packages --explicit-package-bases \
    --follow-imports silent \
    {posargs:plugins/module_utils}
    # start with module_utils, expand later
