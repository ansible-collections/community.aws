---
- name: 's3_lifecycle integration tests'
  collections:
    - amazon.aws
  module_defaults:
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
    s3_lifecycle:
      wait: yes
  block:

    # ============================================================
    - name: Create simple s3_bucket
      s3_bucket:
        name: '{{ bucket_name }}'
        state: present
      register: output

    - assert:
        that:
          - output.changed
          - output.name == bucket_name
          - not output.requester_pays
  # ============================================================
    - name: Create a lifecycle policy
      s3_lifecycle:
        name: '{{ bucket_name }}'
        expiration_days: 300
        prefix: ''
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Create a lifecycle policy (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        expiration_days: 300
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Create a second lifecycle policy
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 30
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Create a second lifecycle policy (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 30
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Disable the second lifecycle policy
      s3_lifecycle:
        name: '{{ bucket_name }}'
        status: disabled
        transition_days: 30
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Disable the second lifecycle policy (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        status: disabled
        transition_days: 30
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Re-enable the second lifecycle policy
      s3_lifecycle:
        name: '{{ bucket_name }}'
        status: enabled
        transition_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Re-enable the second lifecycle policy (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        status: enabled
        transition_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Delete the second lifecycle policy
      s3_lifecycle:
        name: '{{ bucket_name }}'
        state: absent
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Delete the second lifecycle policy (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        state: absent
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Create a second lifecycle policy, with infrequent access
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 30
        storage_class: standard_ia
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Create a second lifecycle policy, with infrequent access (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        storage_class: standard_ia
        transition_days: 30
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Create a second lifecycle policy, with glacier
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Create a second lifecycle policy, with glacier (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Create a lifecycle policy with infrequent access
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 30
        storage_class: standard_ia
        prefix: /something
      register: output

    - name: Create a second lifecycle policy, with glacier
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 300
        prefix: /something
        purge_transitions: false
      register: output

    - name: Create a lifecycle policy with infrequent access (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        storage_class: standard_ia
        transition_days: 30
        prefix: /something
        purge_transitions: false
      register: output

    - assert:
        that:
          - output is not changed

    - name: Create a second lifecycle policy, with glacier (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 300
        prefix: /something
        purge_transitions: false
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Create a lifecycle policy, with noncurrent expiration
      s3_lifecycle:
        name: '{{ bucket_name }}'
        noncurrent_version_expiration_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Create a lifecycle policy, with noncurrent expiration
      s3_lifecycle:
        name: '{{ bucket_name }}'
        noncurrent_version_expiration_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Create a lifecycle policy, with noncurrent transition
      s3_lifecycle:
        name: '{{ bucket_name }}'
        noncurrent_version_transition_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Create a lifecycle policy, with noncurrent transitions and expirations
      s3_lifecycle:
        name: '{{ bucket_name }}'
        noncurrent_version_transition_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Create a lifecycle policy, with noncurrent transition
      s3_lifecycle:
        name: '{{ bucket_name }}'
        noncurrent_version_transition_days: 300
        noncurrent_version_storage_class: standard_ia
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Create a lifecycle policy, with noncurrent transitions and expirations
      s3_lifecycle:
        name: '{{ bucket_name }}'
        noncurrent_version_storage_class: standard_ia
        noncurrent_version_transition_days: 300
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed
  # ============================================================
    - name: Create a lifecycle policy, with noncurrent transitions
      s3_lifecycle:
        name: '{{ bucket_name }}'
        noncurrent_version_transitions:
          - transition_days: 30
            storage_class: standard_ia
          - transition_days: 60
            storage_class: onezone_ia
          - transition_days: 90
            storage_class: glacier
        prefix: /something
      register: output

    - assert:
        that:
          - output is changed
  # ============================================================
    - name: Create a lifecycle policy, with noncurrent transitions
      s3_lifecycle:
        name: '{{ bucket_name }}'
        noncurrent_version_transitions:
          - transition_days: 30
            storage_class: standard_ia
          - transition_days: 60
            storage_class: onezone_ia
          - transition_days: 90
            storage_class: glacier
        prefix: /something
      register: output

    - assert:
        that:
          - output is not changed

  # ============================================================
  # test all the examples
  # Configure a lifecycle rule on a bucket to expire (delete) items with a prefix of /logs/ after 30 days
    - name: example 1
      s3_lifecycle:
        name: '{{ bucket_name }}'
        expiration_days: 30
        prefix: /logs/
        status: enabled
        state: present
      register: output
    - assert:
        that:
          - output is changed

    - name: example 1 (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        expiration_days: 30
        prefix: /logs/
        status: enabled
        state: present
      register: output
    - assert:
        that:
          - output is not changed

    # Configure a lifecycle rule to transition all items with a prefix of /logs/ to glacier after 7 days and then delete after 90 days
    - name: example 2
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 7
        expiration_days: 90
        prefix: /logs/
        status: enabled
        state: present
      register: output
    - assert:
        that:
          - output is changed

    - name: example 2 (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_days: 7
        expiration_days: 90
        prefix: /logs/
        status: enabled
        state: present
      register: output
    - assert:
        that:
          - output is not changed

    # Configure a lifecycle rule to transition all items with a prefix of /logs/ to glacier on 31 Dec 2020 and then delete on 31 Dec 2030.
    # Note that midnight GMT must be specified.
    # Be sure to quote your date strings
    - name: example 3
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_date: "2020-12-30T00:00:00.000Z"
        expiration_date: "2030-12-30T00:00:00.000Z"
        prefix: /logs/
        status: enabled
        state: present
      register: output
    - assert:
        that:
          - output is changed

    - name: example 3 (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        transition_date: "2020-12-30T00:00:00.000Z"
        expiration_date: "2030-12-30T00:00:00.000Z"
        prefix: /logs/
        status: enabled
        state: present
      register: output
    - assert:
        that:
          - output is not changed

    # Disable the rule created above
    - name: example 4
      s3_lifecycle:
        name: '{{ bucket_name }}'
        prefix: /logs/
        status: disabled
        state: present
      register: output
    - assert:
        that:
          - output is changed

    - name: example 4 (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        prefix: /logs/
        status: disabled
        state: present
      register: output
    - assert:
        that:
          - output is not changed

    # Delete the lifecycle rule created above
    - name: example 5
      s3_lifecycle:
        name: '{{ bucket_name }}'
        prefix: /logs/
        state: absent
      register: output
    - assert:
        that:
          - output is changed

    - name: example 5 (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        prefix: /logs/
        state: absent
      register: output
    - assert:
        that:
          - output is not changed

    # Configure a lifecycle rule to transition all backup files older than 31 days in /backups/ to standard infrequent access class.
    - name: example 6
      s3_lifecycle:
        name: '{{ bucket_name }}'
        prefix: /backups/
        storage_class: standard_ia
        transition_days: 31
        state: present
        status: enabled
      register: output
    - assert:
        that:
          - output is changed

    - name: example 6 (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        prefix: /backups/
        storage_class: standard_ia
        transition_days: 31
        state: present
        status: enabled
      register: output
    - assert:
        that:
          - output is not changed

    # Configure a lifecycle rule to transition files to infrequent access after 30 days and glacier after 90
    - name: example 7
      s3_lifecycle:
        name: '{{ bucket_name }}'
        prefix: /other_logs/
        state: present
        status: enabled
        transitions:
          - transition_days: 30
            storage_class: standard_ia
          - transition_days: 90
            storage_class: glacier
      register: output
    - assert:
        that:
          - output is changed

    - name: example 7 (idempotency)
      s3_lifecycle:
        name: '{{ bucket_name }}'
        prefix: /other_logs/
        state: present
        status: enabled
        transitions:
          - transition_days: 30
            storage_class: standard_ia
          - transition_days: 90
            storage_class: glacier
      register: output
    - assert:
        that:
          - output is not changed

 # ============================================================
  always:
    - name: Ensure all buckets are deleted
      s3_bucket:
        name: "{{item}}"
        state: absent
      ignore_errors: yes
      with_items:
        - '{{ bucket_name }}'
