---
- module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  collections:
    - amazon.aws
  block:

    # ============================================================

    - name: test without any parameters
      ec2_vpc_nacl:
      register: result
      ignore_errors: yes

    - name: assert required parameters
      assert:
        that:
          - result.failed
          - "result.msg == 'one of the following is required: name, nacl_id'"

    - name: get network ACL info without any parameters
      ec2_vpc_nacl_info:
      register: nacl_facts

    - name: assert we don't error
      assert:
        that:
          - nacl_facts is succeeded

    - name: get network ACL info with invalid ID
      ec2_vpc_nacl_info:
        nacl_ids:
        - 'acl-000000000000'
      register: nacl_facts
      ignore_errors: yes

    - name: assert message mentions missing ACLs
      assert:
        that:
          - nacl_facts is failed
          - '"does not exist" in nacl_facts.msg'

    # ============================================================

    - name: fetch AZ availability
      aws_az_info:
      register: az_info

    - name: Assert that we have multiple AZs available to us
      assert:
        that: az_info.availability_zones | length >= 2

    - name: pick AZs
      set_fact:
        az_one: '{{ az_info.availability_zones[0].zone_name }}'
        az_two: '{{ az_info.availability_zones[1].zone_name }}'

    # ============================================================

    - name: create a VPC
      ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        name: "{{ vpc_name }}"
        state: present
      register: vpc

    - name: Save VPC ID for later
      set_fact:
        vpc_id: "{{ vpc.vpc.id }}"

    - name: create subnets
      ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        az: "{{ item.az }}"
        vpc_id: "{{ vpc_id }}"
        state: present
        tags:
          Name: "{{ item.name }}"
      with_items:
        - cidr: "{{ subnet_1 }}"
          az: "{{ az_one }}"
          name: "{{ subnet_name }}-1"
        - cidr: "{{ subnet_2 }}"
          az: "{{ az_two }}"
          name: "{{ subnet_name }}-2"
        - cidr: "{{ subnet_3 }}"
          az: "{{ az_one }}"
          name: "{{ subnet_name }}-3"
        - cidr: "{{ subnet_4 }}"
          az: "{{ az_two }}"
          name: "{{ subnet_name }}-4"
      register: subnets

    - name: set helpful facts about subnets
      set_fact:
        subnet_ids: "{{ subnets | community.general.json_query('results[*].subnet.id') }}"
        subnet_names: "{{ subnets | community.general.json_query('results[*].subnet.tags.Name') }}"

    - name: create VPC for IPv6 tests
      ec2_vpc_net:
        cidr_block: "{{ vpc_ipv6_cidr }}"
        name: "{{ vpc_ipv6_name }}"
        state: present
        ipv6_cidr: yes
      register: vpc_result
    - set_fact:
        vpc_ipv6_id: "{{ vpc_result.vpc.id }}"
        vpc_ipv6_cidr_v6: "{{ _ipv6_cidr }}"
        subnet_ipv6: "{{ _ipv6_cidr | regex_replace('::/56', '::/64') }}"
      vars:
        _ipv6_cidr: "{{ vpc_result.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block }}"

    - name: create subnet with IPv6
      ec2_vpc_subnet:
        cidr: "{{ vpc_ipv6_cidr }}"
        vpc_id: "{{ vpc_ipv6_id }}"
        ipv6_cidr: "{{ subnet_ipv6 }}"
        state: present
        tags:
          Name: "{{ subnet_name }}-ipv6"

    # ============================================================

    - include_tasks: tasks/subnet_ids.yml

    - include_tasks: tasks/subnet_names.yml

    - include_tasks: tasks/tags.yml

    - include_tasks: tasks/ingress_and_egress.yml

    - include_tasks: tasks/ipv6.yml

    # ============================================================

  always:

    - name: remove network ACL
      ec2_vpc_nacl:
        vpc_id: "{{ vpc_id }}"
        name: "{{ nacl_name }}"
        state: absent
      register: removed_acl
      ignore_errors: yes

    - name: remove subnets
      ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        vpc_id: "{{ item.vpc_id | default(vpc_id) }}"
        state: absent
      with_items:
        - cidr: "{{ subnet_1 }}"
        - cidr: "{{ subnet_2 }}"
        - cidr: "{{ subnet_3 }}"
        - cidr: "{{ subnet_4 }}"
        - cidr: "{{ vpc_ipv6_cidr }}"
          vpc_id: "{{ vpc_ipv6_id }}"
      ignore_errors: yes
      register: removed_subnets

    - name: remove the VPCs
      ec2_vpc_net:
        vpc_id: "{{ item }}"
        state: absent
      ignore_errors: yes
      register: removed_vpc
      with_items:
        - '{{ vpc_id }}'
        - '{{ vpc_ipv6_id }}'

    # ============================================================
