- name: 'elb_application_lb_info integration tests'
  collections:
    - amazon.aws

  module_defaults:
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'

  block:
    - name: Create a test VPC
      ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        name: '{{ resource_prefix }}_vpc'
        state: present
        ipv6_cidr: true
        tags:
          Name: elb_application_lb testing
          ResourcePrefix: "{{ resource_prefix }}"
      register: vpc

    - name: 'Set fact: VPC ID'
      set_fact:
        vpc_id: "{{ vpc.vpc.id }}"

    - name: Create an internet gateway
      ec2_vpc_igw:
        vpc_id: '{{ vpc_id }}'
        state: present
        tags:
          Name: '{{ resource_prefix }}'
      register: igw

    - name: Create private subnets
      ec2_vpc_subnet:
        cidr: '{{ item.cidr }}'
        az: '{{ aws_region }}{{ item.az }}'
        vpc_id: '{{ vpc_id }}'
        state: present
        tags:
          Public: 'False'
          Name: 'private-{{ item.az }}'
      with_items:
        - cidr: "{{ private_subnet_cidr_1 }}"
          az: a
        - cidr: "{{ private_subnet_cidr_2 }}"
          az: b
      register: private_subnets

    - name: Create public subnets with ipv6
      ec2_vpc_subnet:
        cidr: '{{ item.cidr }}'
        az: '{{ aws_region }}{{ item.az }}'
        vpc_id: '{{ vpc_id }}'
        state: present
        ipv6_cidr: '{{ item.vpc_ipv6_cidr }}'
        tags:
          Public: 'True'
          Name: 'public-{{ item.az }}'
      with_items:
        - cidr: "{{ public_subnet_cidr_1 }}"
          az: a
          vpc_ipv6_cidr: "{{ vpc.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block | replace('0::/56','0::/64') }}"
        - cidr: "{{ public_subnet_cidr_2 }}"
          az: b
          vpc_ipv6_cidr: "{{ vpc.vpc.ipv6_cidr_block_association_set[0].ipv6_cidr_block | replace('0::/56','1::/64') }}"
      register: public_subnets

    - name: Create list of subnet ids
      set_fact:
        public_subnets: "{{ public_subnets.results | map(attribute='subnet') | map(attribute='id') }}"
        private_subnets: "{{ private_subnets.results | map(attribute='subnet') | map(attribute='id') }}"

    - name: Create a route table
      ec2_vpc_route_table:
        vpc_id: '{{ vpc_id }}'
        tags:
          Name: igw-route
          Created: '{{ resource_prefix }}'
        subnets: '{{ public_subnets + private_subnets }}'
        routes:
          - dest: 0.0.0.0/0
            gateway_id: '{{ igw.gateway_id }}'
      register: route_table

    - name: Create a security group for Ansible ELB integration tests
      ec2_group:
        name: '{{ resource_prefix }}'
        description: security group for Ansible ELB integration tests
        state: present
        vpc_id: '{{ vpc_id }}'
        rules:
          - proto: tcp
            from_port: 1
            to_port: 65535
            cidr_ip: 0.0.0.0/0
      register: sec_group

    - name: Create a target group for testing
      elb_target_group:
        name: '{{ tg_name }}'
        protocol: http
        port: 80
        vpc_id: '{{ vpc_id }}'
        state: present
      register: tg

    # ----- elb_application_lb_info tests ------------------------------------------------------

    - name: Create an ELB with a listener & ip address type
      elb_application_lb:
        name: "{{ elb_name }}"
        subnets: "{{ public_subnets }}"
        security_groups: "{{ sec_group.group_id }}"
        state: present
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}"
        ip_address_type: 'dualstack'
      register: elb

    - assert:
        that:
          - elb.changed
          - elb.listeners | length == 1
          - elb.listeners[0].rules | length == 1
          - elb.ip_address_type == 'dualstack'

    - name: Get ELB application info using no args
      elb_application_lb_info:
      register: elb_app_lb_info

    - assert:
        that:
          - elb_app_lb_info.load_balancers | length > 0

    - name: Get ELB application info using load balancer arn
      elb_application_lb_info:
        load_balancer_arns:
          - "{{ elb.load_balancer_arn }}"
      register: elb_app_lb_info

    - assert:
        that:
          - elb_app_lb_info.load_balancers[0].ip_address_type == 'dualstack'

    - name: Get ELB application info using load balancer name
      elb_application_lb_info:
        names:
          - "{{ elb.load_balancer_name }}"
      register: elb_app_lb_info

    - assert:
        that:
          - elb_app_lb_info.load_balancers[0].ip_address_type == 'dualstack'

  # ----- Cleanup ------------------------------------------------------------------------------

  always:
    - name: Destroy ELB
      elb_application_lb:
        name: '{{ elb_name }}'
        state: absent
        wait: true
        wait_timeout: 600
      ignore_errors: true

    - name: Destroy target group if it was created
      elb_target_group:
        name: '{{ tg_name }}'
        protocol: http
        port: 80
        vpc_id: '{{ vpc_id }}'
        state: absent
        wait: true
        wait_timeout: 600
      register: remove_tg
      retries: 5
      delay: 3
      until: remove_tg is success
      when: tg is defined
      ignore_errors: true

    - name: Destroy sec group
      ec2_group:
        name: "{{ resource_prefix }}"
        description: security group for Ansible ELB integration tests
        state: absent
        vpc_id: '{{ vpc_id }}'
      register: remove_sg
      retries: 10
      delay: 5
      until: remove_sg is success
      ignore_errors: true

    - name: Destroy route table
      ec2_vpc_route_table:
        vpc_id: '{{ vpc_id }}'
        route_table_id: '{{ route_table.route_table.route_table_id }}'
        lookup: id
        state: absent
      register: remove_rt
      retries: 10
      delay: 5
      until: remove_rt is success
      ignore_errors: true

    - name: Destroy subnets
      ec2_vpc_subnet:
        cidr: "{{ item }}"
        vpc_id: "{{ vpc_id }}"
        state: absent
      register: remove_subnet
      retries: 10
      delay: 5
      until: remove_subnet is success
      with_items:
        - "{{ private_subnet_cidr_1 }}"
        - "{{ private_subnet_cidr_2 }}"
        - "{{ public_subnet_cidr_1 }}"
        - "{{ public_subnet_cidr_2 }}"
      ignore_errors: true

    - name: Destroy internet gateway
      ec2_vpc_igw:
        vpc_id: '{{ vpc_id }}'
        tags:
          Name: '{{ resource_prefix }}'
        state: absent
      register: remove_igw
      retries: 10
      delay: 5
      until: remove_igw is success
      ignore_errors: true

    - name: Destroy VPC
      ec2_vpc_net:
        cidr_block: "{{ vpc_cidr }}"
        name: "{{ resource_prefix }}_vpc"
        state: absent
      register: remove_vpc
      retries: 10
      delay: 5
      until: remove_vpc is success
      ignore_errors: true
