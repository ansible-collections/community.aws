---
############################################################
# This Integration test is currently very minimal
# It would be good if someone would update the tests to run through the standard 4-step checks for
# all of the module parameters
#
# 1) Set Value (Check mode)
#     - changed is True
#     - object *NOT* updated
# 2) Set Value
#     - changed is True
#     - object updated
# 3) Set same Value (Check mode)
#     - changed is False
#     - object *NOT* updated
#     - Tests idemoptency
# 4) Set same Value
#     - changed is False
#     - object *NOT* updated
#     - Tests idemoptency

- set_fact:
    # As a lookup plugin we won't have access to module_defaults
    connection_args:
      region: "{{ aws_region }}"
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
  no_log: True

- vars:
    first_tags:
      'Key with Spaces': Value with spaces
      CamelCaseKey: CamelCaseValue
      pascalCaseKey: pascalCaseValue
      snake_case_key: snake_case_value
    second_tags:
      'New Key with Spaces': Value with spaces
      NewCamelCaseKey: CamelCaseValue
      newPascalCaseKey: pascalCaseValue
      new_snake_case_key: snake_case_value
    third_tags:
      'Key with Spaces': Value with spaces
      CamelCaseKey: CamelCaseValue
      pascalCaseKey: pascalCaseValue
      snake_case_key: snake_case_value
      'New Key with Spaces': Updated Value with spaces
    final_tags:
      'Key with Spaces': Value with spaces
      CamelCaseKey: CamelCaseValue
      pascalCaseKey: pascalCaseValue
      snake_case_key: snake_case_value
      'New Key with Spaces': Updated Value with spaces
      NewCamelCaseKey: CamelCaseValue
      newPascalCaseKey: pascalCaseValue
      new_snake_case_key: snake_case_value
  block:
  # ============================================================
  #   Preparation
  # ============================================================
  - name: 'Retrieve caller facts'
    aws_caller_info:
    register: caller_info

  - name: 'Generate the ARN pattern to search for'
    vars:
      _caller_info: '{{ caller_info.arn.split(":") }}'
      _base_arn: 'arn:{{_caller_info[1]}}:secretsmanager:{{ aws_region }}'
    set_fact:
      account_arn: '{{_base_arn}}:{{_caller_info[4]}}:secret:'

  # ============================================================
  # Creation testing
  # ============================================================
  - name: add secret to AWS Secrets Manager
    secretsmanager_secret:
      name: "{{ secret_name }}"
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result.changed
        - '"arn" in result.secret'
        # - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.arn.startswith(account_arn)
        # ARN includes a random string after the name
        - secret_name in result.secret.arn
        - result.secret.name == secret_name
        - result.secret.version_ids_to_stages | length == 1

  - name: save the ARN for later comparison
    set_fact:
      secret_arn: '{{ result.secret.arn }}'

  - name: no changes to secret
    secretsmanager_secret:
      name: "{{ secret_name }}"
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - not result.changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.version_ids_to_stages | length == 1

  - name: Set secret description
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result.changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.version_ids_to_stages | length == 2

  ###############################################################
  # Tagging
  ###############################################################

  - name: Set tags (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ first_tags }}"
    register: result
    check_mode: True

  - name: assert changed
    assert:
      that:
        - result is changed

  - name: Set tags
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ first_tags }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result is changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 4
        - result.secret.tags_dict == first_tags
        - result.secret.version_ids_to_stages | length == 2

  - name: Set tags - idempotency (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ first_tags }}"
    register: result
    check_mode: True

  - name: assert changed
    assert:
      that:
        - result is not changed

  - name: Set tags - idempotency
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ first_tags }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result is not changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 4
        - result.secret.tags_dict == first_tags
        - result.secret.version_ids_to_stages | length == 2

  ###

  - name: Update tags with purge (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ second_tags }}"
    register: result
    check_mode: True

  - name: assert changed
    assert:
      that:
        - result is changed

  - name: Update tags with purge
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ second_tags }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result is changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 4
        - result.secret.tags_dict == second_tags
        - result.secret.version_ids_to_stages | length == 2

  - name: Update tags with purge - idempotency (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ second_tags }}"
    register: result
    check_mode: True

  - name: assert changed
    assert:
      that:
        - result is not changed

  - name: Update tags with purge - idempotency
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ second_tags }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result is not changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 4
        - result.secret.tags_dict == second_tags
        - result.secret.version_ids_to_stages | length == 2

  ###

  - name: Update tags without purge (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ third_tags }}"
      purge_tags: false
    register: result
    check_mode: True

  - name: assert changed
    assert:
      that:
        - result is changed

  - name: Update tags without purge
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ third_tags }}"
      purge_tags: false
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result is changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 8
        - result.secret.tags_dict == final_tags
        - result.secret.version_ids_to_stages | length == 2

  - name: Update tags without purge - idempotency (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ third_tags }}"
      purge_tags: false
    register: result
    check_mode: True

  - name: assert changed
    assert:
      that:
        - result is not changed

  - name: Update tags without purge - idempotency
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: "{{ third_tags }}"
      purge_tags: false
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result is not changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 8
        - result.secret.tags_dict == final_tags
        - result.secret.version_ids_to_stages | length == 2

  ###

  - name: Tags not set - idempotency (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
    register: result
    check_mode: True

  - name: assert changed
    assert:
      that:
        - result is not changed

  - name: Tags not set - idempotency
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result is not changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 8
        - result.secret.tags_dict == final_tags
        - result.secret.version_ids_to_stages | length == 2

  ###

  - name: remove all tags from secret (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: {}
    register: result
    check_mode: true

  - name: assert correct keys are returned
    assert:
      that:
        - result is changed

  - name: remove all tags from secret
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: {}
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result is changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 0
        - result.secret.tags_dict | length == 0
        - result.secret.version_ids_to_stages | length == 2

  - name: remove all tags from secret - idempotency (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: {}
    register: result
    check_mode: true

  - name: assert correct keys are returned
    assert:
      that:
        - result is not changed

  - name: remove all tags from secret
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      tags: {}
    register: result

  - name: assert correct keys are returned - idempotency
    assert:
      that:
        - result is not changed
        - '"arn" in result.secret'
        - '"created_date" in result.secret'
        - '"description" in result.secret'
        - '"last_accessed_date" in result.secret'
        - '"last_changed_date" in result.secret'
        - '"name" in result.secret'
        - '"tags" in result.secret'
        - '"tags_dict" in result.secret'
        - '"version_ids_to_stages" in result.secret'
        - result.secret.description == "this is a change to this secret"
        - result.secret.arn == secret_arn
        - result.secret.name == secret_name
        - result.secret.tags | length == 0
        - result.secret.tags_dict | length == 0
        - result.secret.version_ids_to_stages | length == 2

  ###############################################################
  # Resource policy
  ###############################################################

  - name: add resource policy to secret
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      resource_policy: "{{ lookup('template', 'secret-policy.j2', convert_data=False) | string }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result.changed

  - name: remove existing resource policy from secret
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
    register: result

  - name: assert correct keys are returned
    assert:
      that:
        - result.changed

  - name: remove resource policy from secret (idempotency)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
    register: result

  - name: assert no change happened
    assert:
      that:
        - not result.changed

  # ============================================================
  # Update secret using JSON string
  # ============================================================

  - name: Update secret with JSON (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      json_secret:
        my_key: '{{ super_secret_string }}'
    register: result
    check_mode: True

  - name: assert key would be changed
    assert:
      that:
        - result.changed

  - name: Update secret with JSON
    secretsmanager_secret:
      name: "{{ secret_name }}"
      state: present
      description: 'this is a change to this secret'
      secret_type: 'string'
      json_secret:
        my_key: '{{ super_secret_string }}'
    register: result

  - name: assert key is changed
    assert:
      that:
        - result.changed

  - name: Update secret with JSON - idempotency (CHECK_MODE)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      json_secret:
        my_key: '{{ super_secret_string }}'
    register: result
    check_mode: True

  - name: assert key is not changed
    assert:
      that:
        - result is not changed

  - name: Update secret with JSON - idempotency
    secretsmanager_secret:
      name: "{{ secret_name }}"
      description: 'this is a change to this secret'
      state: present
      secret_type: 'string'
      json_secret:
        my_key: '{{ super_secret_string }}'
    register: result
    check_mode: True

  - name: assert key is not changed
    assert:
      that:
        - result is not changed

  # ============================================================
  # Overwrite testing
  # ============================================================

  - name: Create secret with overwrite = False (Check mode)
    secretsmanager_secret:
      name: "{{ secret_name }}-2"
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      overwrite: False
    register: result
    check_mode: True

  - name: assert key is changed
    assert:
      that:
        - result is changed

  - name: Create secret with overwrite = False
    secretsmanager_secret:
      name: "{{ secret_name }}-2"
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}"
      overwrite: False
    register: result

  - name: assert key is changed
    assert:
      that:
        - result is changed

  - name: Update secret with overwrite = False (Check mode)
    secretsmanager_secret:
      name: "{{ secret_name }}-2"
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}-2"
      overwrite: False
    register: result
    check_mode: True

  - name: assert key is not changed
    assert:
      that:
        - result is not changed

  - name: Create secret with overwrite = False
    secretsmanager_secret:
      name: "{{ secret_name }}-2"
      state: present
      secret_type: 'string'
      secret: "{{ super_secret_string }}-2"
      overwrite: False
    register: result

  - name: assert key is not changed
    assert:
      that:
        - result is not changed

  # ============================================================
  # Removal testing
  # ============================================================

  - name: remove secret
    secretsmanager_secret:
      name: "{{ secret_name }}"
      state: absent
      recovery_window: 7
    register: result

  - name: assert key is deleted
    assert:
      that:
        - result.changed

  - name: remove secret (idempotency)
    secretsmanager_secret:
      name: "{{ secret_name }}"
      state: absent
      recovery_window: 7
    register: result

  - name: assert no change happened
    assert:
      that:
        - not result.changed

  - name: immediate secret removal
    secretsmanager_secret:
      name: "{{ secret_name }}"
      state: absent
      recovery_window: 0
    register: result

  - name: assert key is deleted
    assert:
      that:
        - result.changed

  # AWS Doesn't expose when the secret will be removed, all we can do is
  # check that we didn't throw an error
  - name: immediate secret removal
    secretsmanager_secret:
      name: "{{ secret_name }}"
      state: absent
      recovery_window: 0
    register: result

  - name: assert no change happened
    assert:
      that:
        - not result.failed

  always:
  - name: remove secret
    secretsmanager_secret:
      name: "{{ secret_name }}"
      state: absent
      recovery_window: 0
    ignore_errors: yes

  - name: remove secret 2
    secretsmanager_secret:
      name: "{{ secret_name }}-2"
      state: absent
      recovery_window: 0
    ignore_errors: yes
