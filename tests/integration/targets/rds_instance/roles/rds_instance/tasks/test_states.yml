---
  - block:

      - name: Ensure the resource doesn't exist
        rds_instance:
          id: "{{ instance_id }}"
          state: absent
          skip_final_snapshot: True
        register: result

      - assert:
          that:
            - not result.changed
        ignore_errors: yes

      # Test invalid bad options
      - name: Create a DB instance with an invalid engine
        rds_instance:
          id: "{{ instance_id }}"
          state: present
          engine: thisisnotavalidengine
          username: "{{ username }}"
          password: "{{ password }}"
          db_instance_class: "{{ db_instance_class }}"
          allocated_storage: "{{ allocated_storage }}"
        register: result
        ignore_errors: True

      - assert:
          that:
            - result.failed
            - '"DB engine thisisnotavalidengine should be one of" in result.msg'

      # Test clean instance creation with good options
      - name: Check Mode - Create a mariadb instance
        rds_instance:
          id: "{{ instance_id }}"
          state: present
          engine: mariadb
          username: "{{ username }}"
          password: "{{ password }}"
          db_instance_class: "{{ db_instance_class }}"
          allocated_storage: "{{ allocated_storage }}"
          storage_encrypted: True
          tags:
            Name: "{{ instance_id }}"
            Created_by: Ansible rds_instance tests
        register: result
        check_mode: yes

      - assert:
          that:
            - result.changed

      # Test creation, adding tags and enabling encryption
      - name: Create a mariadb instance
        rds_instance:
          id: "{{ instance_id }}"
          state: present
          engine: mariadb
          username: "{{ username }}"
          password: "{{ password }}"
          db_instance_class: "{{ db_instance_class }}"
          allocated_storage: "{{ allocated_storage }}"
          storage_encrypted: True
          tags:
            Name: "{{ instance_id }}"
            Created_by: Ansible rds_instance tests
        register: result

      - assert:
          that:
            - result.changed
            - "result.db_instance_identifier == '{{ instance_id }}'"
            - "result.tags | length == 2"
            - "result.tags.Name == '{{ instance_id }}'"
            - "result.tags.Created_by == 'Ansible rds_instance tests'"
            - result.kms_key_id
            - result.storage_encrypted == true

      - name: Test impotency omitting tags
        rds_instance:
          id: '{{ instance_id }}'
          state: present
          engine: mariadb
          username: "{{ username }}"
          password: "{{ password }}"
          db_instance_class: "{{ db_instance_class }}"
          allocated_storage: "{{ allocated_storage }}"
        register: result

      - assert:
          that:
            - not result.changed
            - result.db_instance_identifier
            - "result.tags | length == 2"

      - name: Idempotence with minimal options
        rds_instance:
          id: '{{ instance_id }}'
          state: present
        register: result

      - assert:
          that:
            - not result.changed
            - result.db_instance_identifier
            - "result.tags | length == 2"

      - name: Test tags are not purged if purge_tags is False
        rds_instance:
          db_instance_identifier: "{{ instance_id }}"
          state: present
          engine: mariadb
          username: "{{ username }}"
          password: "{{ password }}"
          db_instance_class: "{{ db_instance_class }}"
          allocated_storage: "{{ allocated_storage }}"
          tags: {}
          purge_tags: False
        register: result

      - assert:
          that:
            - not result.changed
            - "result.tags | length == 2"

      - name: Add a tag and remove a tag
        rds_instance:
          db_instance_identifier: "{{ instance_id }}"
          state: present
          tags:
            Name: "{{ instance_id }}-new"
            Created_by: Ansible rds_instance tests
          purge_tags: True
        register: result

      - assert:
          that:
            - result.changed
            - "result.tags | length == 2"
            - "result.tags.Name == '{{ instance_id }}-new'"

      - name: Remove all tags
        rds_instance:
          db_instance_identifier: "{{ instance_id }}"
          state: present
          engine: mariadb
          username: "{{ username }}"
          password: "{{ password }}"
          db_instance_class: "{{ db_instance_class }}"
          allocated_storage: "{{ allocated_storage }}"
          tags: {}
        register: result

      - assert:
          that:
            - result.changed
            - not result.tags

      # Test stopping / rebooting instances
      - name: Check Mode - stop the instance
        rds_instance:
          id: '{{ instance_id }}'
          state: stopped
        register: result
        check_mode: yes

      - assert:
          that:
            - result.changed

      - name: Stop the instance
        rds_instance:
          id: '{{ instance_id }}'
          state: stopped
        register: result

      - assert:
          that:
            - result.changed

      - name: Check Mode - idempotence
        rds_instance:
          id: '{{ instance_id }}'
          state: stopped
        register: result
        check_mode: yes

      - assert:
          that:
            - not result.changed

      - name: Idempotence
        rds_instance:
          id: '{{ instance_id }}'
          state: stopped
        register: result

      - assert:
          that:
            - not result.changed

      - name: Check mode - reboot a stopped instance
        rds_instance:
          id: '{{ instance_id }}'
          state: rebooted
        register: result
        check_mode: yes

      - assert:
          that:
            - result.changed

      - name: Reboot a stopped instance
        rds_instance:
          id: '{{ instance_id }}'
          state: rebooted
        register: result

      - assert:
          that:
            - result.changed

      - name: Check Mode - start the instance
        rds_instance:
          id: '{{ instance_id }}'
          state: started
        register: result
        check_mode: yes

      - assert:
          that:
            - not result.changed

      - name: Stop the instance
        rds_instance:
          id: '{{ instance_id }}'
          state: stopped

      - name: Start the instance
        rds_instance:
          id: '{{ instance_id }}'
          state: started
        register: result

      - assert:
          that:
            - result.changed

      # Test final snapshot on deletion
      - name: Delete the DB instance
        rds_instance:
          id: "{{ instance_id }}"
          state: absent
          final_snapshot_identifier: "{{ instance_id }}"
        register: result

      - assert:
          that:
            - result.changed
            - "result.final_snapshot.db_instance_identifier == '{{ instance_id }}'"

      - name: Check that snapshot exists
        rds_snapshot_info:
          db_snapshot_identifier: "{{ instance_id }}"
        register: result

      - assert:
          that:
            - "result.snapshots | length == 1"
            - "result.snapshots.0.engine == 'mariadb'"

    always:

      - name: remove snapshot
        rds_snapshot:
          db_snapshot_identifier: '{{ resource_prefix }}-test-snapshot'
          state: absent
          wait: yes
        ignore_errors: yes

      - name: Remove DB instance
        rds_instance:
          id: '{{ instance_id }}'
          state: absent
          skip_final_snapshot: True
        ignore_errors: yes
