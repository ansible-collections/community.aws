---
#TODO: test availability_zone and multi_az
- block:
    - name: Ensure the resource doesn't exist
      rds_instance:
        id: "{{ instance_id }}"
        state: absent
        skip_final_snapshot: True
      register: result

    - assert:
        that:
          - not result.changed
      ignore_errors: yes

    - name: Create a mariadb instance
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        engine_version: "{{ mariadb_engine_version }}"
        allow_major_version_upgrade: true
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        wait: no
        tags:
          Name: "{{ instance_id }}"
          Created_by: Ansible rds_instance tests
      register: result

    - assert:
        that:
          - result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"

    - name: create a VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: present
        cidr_block: "10.122.122.128/26"
        tags:
          Name: "{{ resource_prefix }}-vpc"
          Description: "created by rds_instance integration tests"
      register: vpc_result

    - name: create subnets
      ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        az: "{{ item.zone }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        tags:
          Name: "{{ resource_prefix }}-subnet"
          Description: "created by rds_instance integration tests"
        state: present
      register: subnets_result
      loop:
        - {"cidr": "10.122.122.128/28", "zone": "{{ aws_region }}a"}
        - {"cidr": "10.122.122.144/28", "zone": "{{ aws_region }}b"}
        - {"cidr": "10.122.122.160/28", "zone": "{{ aws_region }}c"}

    - name: Create security groups
      ec2_group:
        name: "{{ item }}"
        description: "created by rds_instance integration tests"
        state: present
      register: sgs_result
      loop:
        - "{{ resource_prefix }}-sg-1"
        - "{{ resource_prefix }}-sg-2"
        - "{{ resource_prefix }}-sg-3"

    - name: Wait for instance
      rds_instance_info:
        db_instance_identifier: "{{ instance_id }}"
      register: result
      ignore_errors: yes
      retries: 30
      until:
        - result is not failed
        - result.instances | length == 1
        - result.instances[0].db_instance_status == 'available'
      delay: 30

    - name: Create a DB instance with an invalid engine
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: thisisnotavalidengine
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
      register: result
      ignore_errors: True

    - assert:
        that:
          - result.failed
          - '"value of engine must be one of" in result.msg'

    - name: Add IAM roles to mariadb (should fail - iam roles not supported for mariadb)
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        engine_version: "{{ mariadb_engine_version }}"
        allow_major_version_upgrade: true
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        iam_roles:
          - role_arn: 'my_role'
            feature_name: 'my_feature'
      register: result
      ignore_errors: True

    - assert:
        that:
          - result.failed
          - '"is not valid for adding IAM roles" in result.msg'

    # TODO: test modifying db_subnet_group_name, db_security_groups, db_parameter_group_name, option_group_name,
    # monitoring_role_arn, monitoring_interval, domain, domain_iam_role_name, cloudwatch_logs_export_configuration

    # ------------------------------------------------------------------------------------------
    # tags
    - name: Test impotency omitting tags - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
      register: result
      check_mode: yes

    - assert:
        that:
          - not result.changed

    - name: Test impotency omitting tags
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
      register: result

    - assert:
        that:
          - not result.changed
          - result.db_instance_identifier
          - "result.tags | length == 2"

    - name: Idempotence with minimal options
      rds_instance:
        id: "{{ instance_id }}"
        state: present
      register: result

    - assert:
        that:
          - not result.changed
          - result.db_instance_identifier
          - "result.tags | length == 2"

    - name: Test tags are not purged if purge_tags is False
      rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        engine: mariadb
        username: "{{ username }}"
        password: "{{ password }}"
        db_instance_class: "{{ db_instance_class }}"
        allocated_storage: "{{ allocated_storage }}"
        tags: {}
        purge_tags: False
      register: result

    - assert:
        that:
          - not result.changed
          - "result.tags | length == 2"

    - name: Add a tag and remove a tag - check_mode
      rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        tags:
          Name: "{{ instance_id }}-new"
          Created_by: Ansible rds_instance tests
        purge_tags: True
      register: result
      check_mode: yes

    - assert:
        that:
          - result.changed

    - name: Add a tag and remove a tag
      rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        tags:
          Name: "{{ instance_id }}-new"
          Created_by: Ansible rds_instance tests
        purge_tags: True
      register: result

    - assert:
        that:
          - result.changed
          - "result.tags | length == 2"
          - "result.tags.Name == '{{ instance_id }}-new'"

    - name: Add a tag and remove a tag (idempotence) - check_mode
      rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        tags:
          Name: "{{ instance_id }}-new"
          Created_by: Ansible rds_instance tests
        purge_tags: True
      register: result
      check_mode: yes

    - assert:
        that:
          - not result.changed

    - name: Add a tag and remove a tag (idempotence)
      rds_instance:
        db_instance_identifier: "{{ instance_id }}"
        state: present
        tags:
          Name: "{{ instance_id }}-new"
          Created_by: Ansible rds_instance tests
        purge_tags: True
      register: result

    - assert:
        that:
          - not result.changed
          - "result.tags | length == 2"
          - "result.tags.Name == '{{ instance_id }}-new'"

  # ------------------------------------------------------------------------------------------
  # security groups

    - name: Add security groups - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.0.group_id }}"
          - "{{ sgs_result.results.1.group_id }}"
        apply_immediately: true
      check_mode: true
      register: result

    - assert:
        that:
          - result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"

    - name: Add security groups
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.0.group_id }}"
          - "{{ sgs_result.results.1.group_id }}"
        apply_immediately: true
      register: result

    - assert:
        that:
          - result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"
          - "result.vpc_security_groups | selectattr('status', 'in', ['active', 'adding']) | list | length == 2"

    - name: Add security groups (idempotence) - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.0.group_id }}"
          - "{{ sgs_result.results.1.group_id }}"
        apply_immediately: true
      check_mode: true
      register: result

    - assert:
        that:
          - not result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"

    - name: Add security groups (idempotence)
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.0.group_id }}"
          - "{{ sgs_result.results.1.group_id }}"
        apply_immediately: true
      register: result

    - assert:
        that:
          - not result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"
          - "result.vpc_security_groups | selectattr('status', 'in', ['active', 'adding']) | list | length == 2"

  # ------------------------------------------------------------------------------------------

    - name: Add a new security group without purge - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.2.group_id }}"
        apply_immediately: true
        purge_security_groups: false
      check_mode: true
      register: result

    - assert:
        that:
          - result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"

    - name: Add a new security group without purge
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.2.group_id }}"
        apply_immediately: true
        purge_security_groups: false
      register: result

    - assert:
        that:
          - result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"
          - "result.vpc_security_groups | selectattr('status', 'in', ['active', 'adding']) | list | length == 3"

    - name: Add a new security group without purge (idempotence) - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.2.group_id }}"
        apply_immediately: true
        purge_security_groups: false
      register: result
      check_mode: yes

    - assert:
        that:
          - not result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"

    - name: Add a new security group without purge (idempotence)
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.2.group_id }}"
        apply_immediately: true
        purge_security_groups: false
      register: result

    - assert:
        that:
          - not result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"
          - "result.vpc_security_groups | selectattr('status', 'in', ['active', 'adding']) | list | length == 3"

  # ------------------------------------------------------------------------------------------

    - name: Add a security group with purge - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.2.group_id }}"
        apply_immediately: true
      register: result
      check_mode: yes

    - assert:
        that:
          - result.changed

    - name: Add a security group with purge
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.2.group_id }}"
        apply_immediately: true
      register: result

    - assert:
        that:
          - result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"
          - "result.vpc_security_groups | selectattr('status', 'in', ['active', 'adding']) | list | length == 1"
          - "result.vpc_security_groups | selectattr('status', 'equalto', 'removing') | list | length == 2"

    - name: Add a security group with purge (idempotence) - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.2.group_id }}"
        apply_immediately: true
      register: result
      check_mode: yes

    - assert:
        that:
          - not result.changed

    - name: Add a security group with purge (idempotence)
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        vpc_security_group_ids:
          - "{{ sgs_result.results.2.group_id }}"
        apply_immediately: true
      register: result

    - assert:
        that:
          - not result.changed
          - "result.db_instance_identifier == '{{ instance_id }}'"
          - "result.vpc_security_groups | selectattr('status', 'in', ['active', 'adding']) | list | length == 1"

  # ------------------------------------------------------------------------------------------
  # rename

    - name: Modify the instance name without immediate application - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        new_id: "{{ modified_instance_id }}"
        apply_immediately: False
      register: result
      check_mode: yes

    - assert:
        that:
          - result.changed

    - name: Modify the instance name without immediate application
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        new_id: "{{ modified_instance_id }}"
        apply_immediately: False
      register: result

    - assert:
        that:
          - result.changed
          - 'result.db_instance_identifier == "{{ instance_id }}"'

    - name: Immediately apply the pending update - check_mode
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        new_id: "{{ modified_instance_id }}"
        apply_immediately: True
      register: result
      check_mode: yes

    - assert:
        that:
          - result.changed

    - name: Immediately apply the pending update
      rds_instance:
        id: "{{ instance_id }}"
        state: present
        new_id: "{{ modified_instance_id }}"
        apply_immediately: True
      register: result

    - assert:
        that:
          - result.changed
          - 'result.db_instance_identifier == "{{ modified_instance_id }}"'

  always:
    - name: Delete the instance
      rds_instance:
        id: "{{ item }}"
        state: absent
        skip_final_snapshot: True
        wait: false
      ignore_errors: yes
      loop:
        - "{{ instance_id }}"
        - "{{ modified_instance_id }}"

    - name: Remove security groups
      ec2_group:
        name: "{{ item }}"
        description: "created by rds_instance integration tests"
        state: absent
      register: sgs_result
      loop:
        - "{{ resource_prefix }}-sg-1"
        - "{{ resource_prefix }}-sg-2"
        - "{{ resource_prefix }}-sg-3"
      ignore_errors: yes
      retries: 30
      until: sgs_result is not failed
      delay: 10

    - name: remove subnets
      ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        az: "{{ item.zone }}"
        vpc_id: "{{ vpc_result.vpc.id }}"
        tags:
          Name: "{{ resource_prefix }}-subnet"
          Description: "created by rds_instance integration tests"
        state: absent
      register: subnets
      ignore_errors: yes
      retries: 30
      until: subnets is not failed
      delay: 10
      loop:
        - {"cidr": "10.122.122.128/28", "zone": "{{ aws_region }}a"}
        - {"cidr": "10.122.122.144/28", "zone": "{{ aws_region }}b"}
        - {"cidr": "10.122.122.160/28", "zone": "{{ aws_region }}c"}
        - {"cidr": "10.122.122.176/28", "zone": "{{ aws_region }}d"}

    - name: Delete VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: absent
        cidr_block: "10.122.122.128/26"
        tags:
          Name: "{{ resource_prefix }}-vpc"
          Description: "created by rds_instance integration tests"
      register: vpc_result
      ignore_errors: yes
      retries: 30
      until: vpc_result is not failed
      delay: 10
