---
- module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"

  block:
    ############################################
    # create ALB and necessary dependencies
    # to test wafv2_resources
    ############################################
    - name: create VPC
      ec2_vpc_net:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        cidr_block: 10.228.228.0/22
        name: '{{ resource_prefix }}_vpc'
        state: present
      register: vpc

    - name: create internet gateway
      ec2_vpc_igw:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
        tags:
          Name: '{{ resource_prefix }}'
      register: igw

    - name: create public subnet
      ec2_vpc_subnet:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        cidr: '{{ item.cidr }}'
        az: '{{ aws_region}}{{ item.az }}'
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
        tags:
          Public: '{{ item.public|string }}'
          Name: '{{ item.public|ternary(''public'', ''private'') }}-{{ item.az }}'
      with_items:
      - cidr: 10.228.228.0/24
        az: a
        public: 'True'
      - cidr: 10.228.229.0/24
        az: b
        public: 'True'
      - cidr: 10.228.230.0/24
        az: a
        public: 'False'
      - cidr: 10.228.231.0/24
        az: b
        public: 'False'
      register: subnets

    - ec2_vpc_subnet_info:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        filters:
          vpc-id: '{{ vpc.vpc.id }}'
      register: vpc_subnets

    - name: create list of subnet ids
      set_fact:
        alb_subnets: '{{ vpc_subnets|community.general.json_query(''subnets[?tags.Public == `True`].id'') }}'
        private_subnets: '{{ vpc_subnets|community.general.json_query(''subnets[?tags.Public != `True`].id'') }}'

    - name: create a route table
      ec2_vpc_route_table:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        vpc_id: '{{ vpc.vpc.id }}'
        tags:
          Name: igw-route
          Created: '{{ resource_prefix }}'
        subnets: '{{ alb_subnets + private_subnets }}'
        routes:
        - dest: 0.0.0.0/0
          gateway_id: '{{ igw.gateway_id }}'
      register: route_table

    - ec2_group:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        name: '{{ resource_prefix }}'
        description: security group for Ansible ALB integration tests
        state: present
        vpc_id: '{{ vpc.vpc.id }}'
        rules:
        - proto: tcp
          from_port: 1
          to_port: 65535
          cidr_ip: 0.0.0.0/0
      register: sec_group

    - name: create a target group for testing
      elb_target_group:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        name: '{{ tg_name }}'
        protocol: http
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
      register: tg

    - name: create ALB with a listener
      elb_application_lb:
        name: "{{ alb_name }}"
        subnets: "{{ alb_subnets }}"
        security_groups: "{{ sec_group.group_id }}"
        state: present
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}"
      register: alb

    - assert:
        that:
          - alb.changed
          - alb.listeners|length == 1
          - alb.listeners[0].rules|length == 1

    - name: test idempotence creating ALB with a listener
      elb_application_lb:
        name: "{{ alb_name }}"
        subnets: "{{ alb_subnets }}"
        security_groups: "{{ sec_group.group_id }}"
        state: present
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}"
      register: alb

    - assert:
        that:
          - not alb.changed
          - alb.listeners|length == 1
          - alb.listeners[0].rules|length == 1

    #######################
    ## Create web acl
    #######################
    - name: check_mode create web acl
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: present
        description: hallo eins
        scope: REGIONAL
        default_action: Allow
        sampled_requests: no
        cloudwatch_metrics: yes
        metric_name: blub
        rules:
          - name: zwei
            priority: 2
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              xss_match_statement:
                field_to_match:
                  body: {}
                text_transformations:
                  - type: NONE
                    priority: 0
          - name: admin_protect
            priority: 1
            override_action: 
              none: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              managed_rule_group_statement:
                vendor_name: AWS
                name: AWSManagedRulesAdminProtectionRuleSet
        tags:
          A: B
          C: D
      register: out
      check_mode: yes

    - name: check_mode verify create
      assert:
        that:
          - out is changed

    - name: create web acl
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: present
        description: hallo eins
        scope: REGIONAL
        default_action: Allow
        sampled_requests: no
        cloudwatch_metrics: yes
        metric_name: blub
        rules:
          - name: zwei
            priority: 2
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              xss_match_statement:
                field_to_match:
                  body: {}
                text_transformations:
                  - type: NONE
                    priority: 0
          - name: admin_protect
            priority: 1
            override_action: 
              none: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              managed_rule_group_statement:
                vendor_name: AWS
                name: AWSManagedRulesAdminProtectionRuleSet
        tags:
          A: B
          C: D
      register: ACL

    - name: verify create
      assert:
        that:
          - ACL is changed

    - name: immutable create web acl
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: present
        description: hallo eins
        scope: REGIONAL
        default_action: Allow
        sampled_requests: no
        cloudwatch_metrics: yes
        metric_name: blub
        rules:
          - name: zwei
            priority: 2
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              xss_match_statement:
                field_to_match:
                  body: {}
                text_transformations:
                  - type: NONE
                    priority: 0
          - name: admin_protect
            priority: 1
            override_action: 
              none: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              managed_rule_group_statement:
                vendor_name: AWS
                name: AWSManagedRulesAdminProtectionRuleSet
        tags:
          A: B
          C: D
      register: out

    - name: verify create
      assert:
        that:
          - out is not changed

    ####################################
    # Create and test rule group
    ####################################
    - name: check_mode create rule group
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out
      check_mode: yes

    - name: check_mode verify create
      assert:
        that:
          - out is changed

    - name: create rule group
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify create
      assert:
        that:
          - out is changed

    - name: rule group info
      wafv2_rule_group_info:
        name: "{{ rule_group_name }}"
        state: present
        scope: REGIONAL
      register: out

    - name: verify one rule
      assert:
        that:
          - out.rules | count == 1

    - name: immutable create rule group
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify immutable create
      assert:
        that:
          - out is not changed

    - name: change description
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: iummutable change description
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify no change
      assert:
        that:
          - out is not changed

    - name: add rule
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
          - name: zwei
            priority: 2
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              or_statement:
                statements:
                  - byte_match_statement:
                      search_string: ansible.com
                      positional_constraint: CONTAINS
                      field_to_match:
                        single_header:
                          name: host
                      text_transformations:
                        - type: LOWERCASE
                          priority: 0
                  - xss_match_statement:
                      field_to_match:
                        body: {}
                      text_transformations:
                        - type: NONE
                          priority: 0      
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: immutable add rule
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
          - name: zwei
            priority: 2
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              or_statement:
                statements:
                  - byte_match_statement:
                      search_string: ansible.com
                      positional_constraint: CONTAINS
                      field_to_match:
                        single_header:
                          name: host
                      text_transformations:
                        - type: LOWERCASE
                          priority: 0
                  - xss_match_statement:
                      field_to_match:
                        body: {}
                      text_transformations:
                        - type: NONE
                          priority: 0 
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify no change
      assert:
        that:
          - out is not changed

    - name: change rule
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
          - name: zwei
            priority: 3
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              or_statement:
                statements:
                  - byte_match_statement:
                      search_string: ansible.com
                      positional_constraint: CONTAINS
                      field_to_match:
                        single_header:
                          name: host
                      text_transformations:
                        - type: LOWERCASE
                          priority: 0
                  - xss_match_statement:
                      field_to_match:
                        body: {}
                      text_transformations:
                        - type: NONE
                          priority: 0 
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: immutable change rule
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        rules:
          - name: eins
            priority: 1
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
          - name: zwei
            priority: 3
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              or_statement:
                statements:
                  - byte_match_statement:
                      search_string: ansible.com
                      positional_constraint: CONTAINS
                      field_to_match:
                        single_header:
                          name: host
                      text_transformations:
                        - type: LOWERCASE
                          priority: 0
                  - xss_match_statement:
                      field_to_match:
                        body: {}
                      text_transformations:
                        - type: NONE
                          priority: 0 
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify no change
      assert:
        that:
          - out is not changed

    - name: change rule again
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        rules:
          - name: zwei
            priority: 1
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              or_statement:
                statements:
                  - byte_match_statement:
                      search_string: ansible.com
                      positional_constraint: CONTAINS
                      field_to_match:
                        single_header:
                          name: host
                      text_transformations:
                        - type: LOWERCASE
                          priority: 0
                  - xss_match_statement:
                      field_to_match:
                        body: {}
                      text_transformations:
                        - type: NONE
                          priority: 0
          - name: eins
            priority: 2
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              byte_match_statement:
                search_string: ansible.com
                positional_constraint: CONTAINS
                field_to_match:
                  single_header:
                    name: host
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: add one rule
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        purge_rules: no
        rules:
          - name: allow-admin-svg
            priority: 3
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: allow-admin-svg
            statement:
              byte_match_statement:
                search_string: admin.svg
                positional_constraint: CONTAINS
                field_to_match:
                  uri_path: {}
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: rule group info
      wafv2_rule_group_info:
        name: "{{ rule_group_name }}"
        state: present
        scope: REGIONAL
      register: out

    - name: verify create
      assert:
        that:
          - out.rules | count == 3

    - name: immutable add one rule
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        purge_rules: no
        rules:
          - name: allow-admin-svg
            priority: 3
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: allow-admin-svg
            statement:
              byte_match_statement:
                search_string: admin.svg
                positional_constraint: CONTAINS
                field_to_match:
                  uri_path: {}
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify no change
      assert:
        that:
          - out is not changed

    - name: purge rules
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: present
        description: hallo eins zwei
        scope: REGIONAL
        capacity: 500
        purge_rules: yes
        rules:
          - name: allow-admin-svg
            priority: 3
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: allow-admin-svg
            statement:
              byte_match_statement:
                search_string: admin.svg
                positional_constraint: CONTAINS
                field_to_match:
                  uri_path: {}
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
        cloudwatch_metrics: yes
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: absent one rule rules
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: absent
        description: hallo eins zwei
        scope: REGIONAL
        rules:
          - name: allow-admin-svg
            priority: 3
            action: 
              allow: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: allow-admin-svg
            statement:
              byte_match_statement:
                search_string: admin.svg
                positional_constraint: CONTAINS
                field_to_match:
                  uri_path: {}
                text_transformations:
                  - type: LOWERCASE
                    priority: 0
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: rule group info
      wafv2_rule_group_info:
        name: "{{ rule_group_name }}"
        state: present
        scope: REGIONAL
      register: out

    - name: verify change
      assert:
        that:
          - out.rules | count == 0

    ###############################
    # test web acl
    ###############################
    - name: get web acl
      wafv2_web_acl_info:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
      register: out

    - name: verify rules
      assert:
        that:
          - out.rules | count == 2

    - name: change web acl description
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: present
        description: hallo eins drei
        scope: REGIONAL
        default_action: Allow
        sampled_requests: no
        cloudwatch_metrics: yes
        metric_name: blub
        rules:
          - name: zwei
            priority: 2
            action: 
              block: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: ddos
            statement:
              xss_match_statement:
                field_to_match:
                  body: {}
                text_transformations:
                  - type: NONE
                    priority: 0
          - name: admin_protect
            priority: 1
            override_action: 
              none: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              managed_rule_group_statement:
                vendor_name: AWS
                name: AWSManagedRulesAdminProtectionRuleSet
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed


    - name: add 1 rules
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: present
        description: hallo eins drei
        scope: REGIONAL
        default_action: Allow
        sampled_requests: no
        cloudwatch_metrics: yes
        metric_name: blub
        purge_rules: no
        rules:
          - name: bla
            priority: 8
            override_action: 
              none: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: fsd
            statement:
              managed_rule_group_statement:
                vendor_name: AWS
                name: AWSManagedRulesAdminProtectionRuleSet
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: get web acl
      wafv2_web_acl_info:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
      register: out

    - name: verify rules
      assert:
        that:
          - out.rules | count == 3

    - name: reduce rules to 1
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: present
        description: hallo eins drei
        scope: REGIONAL
        default_action: Allow
        sampled_requests: no
        cloudwatch_metrics: yes
        metric_name: blub
        rules:
          - name: admin_protect
            priority: 1
            override_action: 
              none: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: admin_protect
            statement:
              managed_rule_group_statement:
                vendor_name: AWS
                name: AWSManagedRulesAdminProtectionRuleSet
        tags:
          A: B
          C: D
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: get web acl
      wafv2_web_acl_info:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
      register: out

    - name: verify rules
      assert:
        that:
          - out.rules | count == 1

    - name: immutable change web acl
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: present
        description: hallo eins drei
        scope: REGIONAL
        default_action: Allow
        sampled_requests: no
        cloudwatch_metrics: yes
        metric_name: blub
        rules:
          - name: admin_protect
            priority: 1
            override_action: 
              none: {}
            visibility_config: 
              sampled_requests_enabled: yes
              cloud_watch_metrics_enabled: yes
              metric_name: admin_protect
            statement:
              managed_rule_group_statement:
                vendor_name: AWS
                name: AWSManagedRulesAdminProtectionRuleSet
        tags:
          A: B
          C: D
      register: out

    - name: verify no change
      assert:
        that:
          - out is not changed

    ################################
    # test wafv2 resouces
    # bind ALB to WAFv2 ACL
    ################################
    - name: check_mode add test alb to test waf
      wafv2_resources:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
        state: present
        arn: "{{ alb.load_balancer_arn }}"
      check_mode: yes
      register: out

    - name: verify check_mode create
      assert:
        that:
          - out is changed

    - name: add test alb to test waf
      wafv2_resources:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
        state: present
        arn: "{{ alb.load_balancer_arn }}"
      register: out
      retries: 5
      delay: 15
      until: out.failed == false

    - name: verify create
      assert:
        that:
          - out is changed
    
    - name: get web acl
      wafv2_resources_info:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
      register: out

    - name: immutable add test alb from test waf
      wafv2_resources:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
        state: present
        arn: "{{ alb.load_balancer_arn }}"
      register: out

    - name: verify immutable create
      assert:
        that:
          - out is not changed

    - name: remove test alb from test waf
      wafv2_resources:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
        state: absent
        arn: "{{ alb.load_balancer_arn }}"

    ##############################
    # test delete wafv2 resources
    ##############################
    - name: remove rule group
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: absent
        scope: REGIONAL
      register: out

    - name: verify change
      assert:
        that:
          - out is changed

    - name: immutable remove rule group
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: absent
        scope: REGIONAL
      register: out

    - name: verify no change
      assert:
        that:
          - out is not changed

    - name: delete web acl
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: absent
        scope: REGIONAL
      register: out

    - name: verify change
      assert:
        that:
          - out is changed


    - name:  immutable delete web acl
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: absent
        scope: REGIONAL
      register: out

    - name: verify not change
      assert:
        that:
          - out is not changed
    
  always:
    ###################################
    # always delete wafv2 components
    ###################################
    - name: remove test alb from waf web acs
      wafv2_resources:
        name: "{{ web_acl_name }}"
        scope: REGIONAL
        state: absent
        arn: "{{ alb.load_balancer_arn }}"
      ignore_errors: true

    - name: always delete web acl
      wafv2_web_acl:
        name: "{{ web_acl_name }}"
        state: absent
        scope: REGIONAL
      ignore_errors: true

    - name: take care rule group is removed
      wafv2_rule_group:
        name: "{{ rule_group_name }}"
        state: absent
        scope: REGIONAL
      ignore_errors: true

    #########################
    # remove alb and its deps
    #########################
    - name: destroy ALB
      elb_application_lb:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        name: '{{ alb_name }}'
        state: absent
        wait: true
        wait_timeout: 600
      ignore_errors: true

    - name: destroy target group if it was created
      elb_target_group:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        name: '{{ tg_name }}'
        protocol: http
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: absent
        wait: true
        wait_timeout: 600
      register: remove_tg
      retries: 5
      delay: 3
      until: remove_tg is success
      when: tg is defined
      ignore_errors: true

    - name: destroy sec group
      ec2_group:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        name: '{{ sec_group.group_name }}'
        description: security group for Ansible ALB integration tests
        state: absent
        vpc_id: '{{ vpc.vpc.id }}'
      register: remove_sg
      retries: 10
      delay: 5
      until: remove_sg is success
      ignore_errors: true

    - name: remove route table
      ec2_vpc_route_table:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        vpc_id: '{{ vpc.vpc.id }}'
        route_table_id: '{{ route_table.route_table.route_table_id }}'
        lookup: id
        state: absent
      register: remove_rt
      retries: 10
      delay: 5
      until: remove_rt is success
      ignore_errors: true

    - name: destroy subnets
      ec2_vpc_subnet:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        cidr: '{{ item.cidr }}'
        vpc_id: '{{ vpc.vpc.id }}'
        state: absent
      register: remove_subnet
      retries: 10
      delay: 5
      until: remove_subnet is success
      with_items:
      - cidr: 10.228.228.0/24
      - cidr: 10.228.229.0/24
      - cidr: 10.228.230.0/24
      - cidr: 10.228.231.0/24
      ignore_errors: true

    - name: destroy internet gateway
      ec2_vpc_igw:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        vpc_id: '{{ vpc.vpc.id }}'
        tags:
          Name: '{{ resource_prefix }}'
        state: absent
      register: remove_igw
      retries: 10
      delay: 5
      until: remove_igw is success
      ignore_errors: true

    - name: destroy VPC
      ec2_vpc_net:
        aws_access_key: '{{ aws_access_key }}'
        aws_secret_key: '{{ aws_secret_key }}'
        security_token: '{{ security_token }}'
        region: '{{ aws_region }}'
        cidr_block: 10.228.228.0/22
        name: '{{ resource_prefix }}_vpc'
        state: absent
      register: remove_vpc
      retries: 10
      delay: 5
      until: remove_vpc is success
      ignore_errors: true
