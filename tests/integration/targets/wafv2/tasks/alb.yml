############################################
# create ALB and necessary dependencies
# to test wafv2_resources
############################################
- name: create VPC
  ec2_vpc_net:
    cidr_block: "{{ cidr.main }}"
    name: '{{ resource_prefix }}_vpc'
    state: present
  register: vpc

- name: create internet gateway
  ec2_vpc_igw:
    vpc_id: '{{ vpc.vpc.id }}'
    state: present
    tags:
      Name: '{{ resource_prefix }}'
  register: igw

- name: create public subnet
  ec2_vpc_subnet:
    cidr: '{{ item.cidr }}'
    az: '{{ aws_region}}{{ item.az }}'
    vpc_id: '{{ vpc.vpc.id }}'
    state: present
    tags:
      Public: '{{ item.public|string }}'
      Name: '{{ item.public|ternary(''public'', ''private'') }}-{{ item.az }}'
  with_items:
  - cidr: "{{ cidr.a }}"
    az: a
    public: 'True'
  - cidr: "{{ cidr.b }}"
    az: b
    public: 'True'
  - cidr: "{{ cidr.c }}"
    az: a
    public: 'False'
  - cidr: "{{ cidr.d }}"
    az: b
    public: 'False'
  register: subnets

- ec2_vpc_subnet_info:
    filters:
      vpc-id: '{{ vpc.vpc.id }}'
  register: vpc_subnets

- name: create list of subnet ids
  set_fact:
    alb_subnets: "{{ (vpc_subnets.subnets| selectattr('tags.Public', 'equalto', 'True')| map(attribute='id')| list) }}"
    private_subnets: "{{ (vpc_subnets.subnets| selectattr('tags.Public', 'equalto', 'False')| map(attribute='id')| list)  }}"

- name: create a route table
  ec2_vpc_route_table:
    vpc_id: '{{ vpc.vpc.id }}'
    tags:
      Name: igw-route
      Created: '{{ resource_prefix }}'
    subnets: '{{ alb_subnets + private_subnets }}'
    routes:
    - dest: 0.0.0.0/0
      gateway_id: '{{ igw.gateway_id }}'
  register: route_table

- ec2_group:
    name: '{{ resource_prefix }}'
    description: security group for Ansible ALB integration tests
    state: present
    vpc_id: '{{ vpc.vpc.id }}'
    rules:
    - proto: tcp
      from_port: 1
      to_port: 65535
      cidr_ip: 0.0.0.0/0
  register: sec_group

- name: create a target group for testing
  elb_target_group:
    name: '{{ tg_name }}'
    protocol: http
    port: 80
    vpc_id: '{{ vpc.vpc.id }}'
    state: present
  register: tg

- name: create ALB with a listener
  elb_application_lb:
    name: "{{ alb_name }}"
    subnets: "{{ alb_subnets }}"
    security_groups: "{{ sec_group.group_id }}"
    state: present
    wait: yes
    listeners:
      - Protocol: HTTP
        Port: 80
        DefaultActions:
          - Type: forward
            TargetGroupName: "{{ tg_name }}"
  register: alb

- assert:
    that:
      - alb.listeners|length == 1
      - alb.listeners[0].rules|length == 1
