---
- block:
    - name: create ecs cluster
      ecs_cluster:
        name: "{{ resource_prefix }}"
        state: present

    - name: create ecs_taskdefinition
      ecs_taskdefinition:
        containers:
          - name: my_container
            image: ubuntu
            memory: 128
        family: "{{ resource_prefix }}"
        state: present
      register: ecs_taskdefinition_creation

    # even after deleting the cluster and recreating with a different name
    # the previous service can prevent the current service from starting
    # while it's in a draining state. Check the service info and sleep
    # if the service does not report as inactive.

    - name: check if service is still running from a previous task
      ecs_service_info:
        service: "{{ resource_prefix }}"
        cluster: "{{ resource_prefix }}"
        details: yes
      register: ecs_service_info_results
    - name: delay if the service was not inactive
      debug: var=ecs_service_info_results

    - name: delay if the service was not inactive
      pause:
        seconds: 30
      when:
        - ecs_service_info_results.services|length >0
        - ecs_service_info_results.services[0]['status'] != 'INACTIVE'

    - name: create ecs_service
      ecs_service:
        name: "{{ resource_prefix }}"
        cluster: "{{ resource_prefix }}"
        task_definition: "{{ resource_prefix }}"
        desired_count: 1
        state: present
      register: ecs_service_creation

    - name: ecs_service works fine even when older botocore is used
      assert:
        that:
          - ecs_service_creation.changed

    - name: create ecs_service using force_new_deployment
      ecs_service:
        name: "{{ resource_prefix }}"
        cluster: "{{ resource_prefix }}"
        task_definition: "{{ resource_prefix }}"
        desired_count: 1
        force_new_deployment: true
        state: present
      register: ecs_service_creation_force_new_deploy
      ignore_errors: yes

    - name: check that module returns success
      assert:
        that:
          - ecs_service_creation_force_new_deploy.changed

  always:
    - name: scale down ecs service
      ecs_service:
        name: "{{ resource_prefix }}"
        cluster: "{{ resource_prefix }}"
        task_definition: "{{ resource_prefix }}"
        desired_count: 0
        state: present
      ignore_errors: yes

    - name: pause to wait for scale down
      pause:
        seconds: 30

    - name: remove ecs service
      ecs_service:
        name: "{{ resource_prefix }}"
        cluster: "{{ resource_prefix }}"
        task_definition: "{{ resource_prefix }}"
        desired_count: 1
        state: absent
      ignore_errors: yes

    - name: remove ecs task definition
      ecs_taskdefinition:
        containers:
          - name: my_container
            image: ubuntu
            memory: 128
        family: "{{ resource_prefix }}"
        revision: "{{ ecs_taskdefinition_creation.taskdefinition.revision }}"
        state: absent
      ignore_errors: yes

    - name: remove ecs cluster
      ecs_cluster:
        name: "{{ resource_prefix }}"
        state: absent
      ignore_errors: yes
