- block:
  # ============================================================
  # set up VPC
  - name: Create VPC for use in testing
    ec2_vpc_net:
      name: "{{ resource_prefix }}-vpc"
      cidr_block: 10.99.0.0/16
      tags:
        Name: Ansible ec2_instance Testing VPC
      tenancy: default
    register: testing_vpc

  - name: Create default subnet in zone A
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ testing_vpc.vpc.id }}"
      cidr: 10.99.0.0/24
      az: "{{ aws_region }}a"
      resource_tags:
        Name: "{{ resource_prefix }}-subnet-a"
    register: testing_subnet_a

  - name: Create secondary subnet in zone B
    ec2_vpc_subnet:
      state: present
      vpc_id: "{{ testing_vpc.vpc.id }}"
      cidr: 10.99.1.0/24
      az: "{{ aws_region }}b"
      resource_tags:
        Name: "{{ resource_prefix }}-subnet-b"
    register: testing_subnet_b

  - name: create a security group with the vpc
    ec2_group:
      name: "{{ resource_prefix }}-sg"
      description: a security group for ansible tests
      vpc_id: "{{ testing_vpc.vpc.id }}"
      rules:
        - proto: tcp
          ports: [22, 80]
          cidr_ip: 0.0.0.0/0
    register: sg
    # TODO: switch these tests from instances
  - assert:
      that:
      - 1 == 0
  # ============================================================
  # start subnet/sg testing
  - name: Make instance in the testing subnet created in the test VPC
    ec2_instance:
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_image }}"
      user_data: |
        #cloud-config
        package_upgrade: true
        package_update: true
      tags:
        TestId: "{{ resource_prefix }}"
        Something: else
      security_groups: "{{ sg.group_id }}"
      network:
        source_dest_check: false
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: t2.micro
      volumes:
      - device_name: /dev/sda1
        ebs:
          delete_on_termination: true
    register: in_test_vpc

  - name: Try to re-make the instance, hopefully this shows changed=False
    ec2_instance:
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_image }}"
      user_data: |
        #cloud-config
        package_upgrade: true
        package_update: true
      tags:
        TestId: "{{ resource_prefix }}"
        Something: else
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: t2.micro
    register: remake_in_test_vpc
  - name: "Remaking the same instance resulted in no changes"
    assert:
      that: not remake_in_test_vpc.changed
  - name: check that instance IDs match anyway
    assert:
      that: 'remake_in_test_vpc.instance_ids[0] == in_test_vpc.instance_ids[0]'
  - name: check that source_dest_check was set to false
    assert:
      that: 'not remake_in_test_vpc.instances[0].source_dest_check'

  - name: Alter it by adding tags
    ec2_instance:
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_image }}"
      tags:
        TestId: "{{ resource_prefix }}"
        Another: thing
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: t2.micro
    register: add_another_tag

  - ec2_instance_info:
      instance_ids: "{{ add_another_tag.instance_ids }}"
    register: check_tags
  - name: "Remaking the same instance resulted in no changes"
    assert:
      that:
        - check_tags.instances[0].tags.Another == 'thing'
        - check_tags.instances[0].tags.Something == 'else'

  - name: Purge a tag
    ec2_instance:
      name: "{{ resource_prefix }}-test-basic-vpc-create"
      image_id: "{{ ec2_ami_image }}"
      purge_tags: true
      tags:
        TestId: "{{ resource_prefix }}"
        Another: thing
      security_groups: "{{ sg.group_id }}"
      vpc_subnet_id: "{{ testing_subnet_b.subnet.id }}"
      instance_type: t2.micro
  - ec2_instance_info:
      instance_ids: "{{ add_another_tag.instance_ids }}"
    register: check_tags
  - name: "Remaking the same instance resulted in no changes"
    assert:
      that:
        - "'Something' not in check_tags.instances[0].tags"

  - name: Terminate instance
    ec2_instance:
      filters:
        tag:TestId: "{{ resource_prefix }}"
      state: absent
    register: result
  - assert:
      that: result.changed

  - name: Terminate instance
    ec2_instance:
      instance_ids: "{{ in_test_vpc.instance_ids }}"
      state: absent
    register: result
  - assert:
      that: not result.changed

  - name: check that subnet-default public IP rule was followed
    assert:
      that:
        - in_test_vpc.instances[0].public_dns_name == ""
        - in_test_vpc.instances[0].private_ip_address.startswith("10.22.33")
        - in_test_vpc.instances[0].subnet_id == testing_subnet_b.subnet.id
  - name: check that tags were applied
    assert:
      that:
        - in_test_vpc.instances[0].tags.Name.startswith(resource_prefix)
        - in_test_vpc.instances[0].state.name == 'running'

  always:
  - name: remove the security group
    ec2_group:
      name: "{{ resource_prefix }}-sg"
      description: a security group for ansible tests
      vpc_id: "{{ testing_vpc.vpc.id }}"
      state: absent
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10

  - name: remove subnet A
    ec2_vpc_subnet:
      state: absent
      vpc_id: "{{ testing_vpc.vpc.id }}"
      cidr: 10.99.0.0/24
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10

  - name: remove subnet B
    ec2_vpc_subnet:
      state: absent
      vpc_id: "{{ testing_vpc.vpc.id }}"
      cidr: 10.99.1.0/24
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10

  - name: remove the VPC
    ec2_vpc_net:
      name: "{{ resource_prefix }}-vpc"
      cidr_block: 10.99.0.0/16
      state: absent
      tags:
        Name: Ansible Testing VPC
      tenancy: default
    register: removed
    until: removed is not failed
    ignore_errors: yes
    retries: 10
