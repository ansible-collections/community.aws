- name: set connection information for aws modules and run tasks
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
  vars:
    prefix_num: "{{ resource_prefix | regex_search('([0-9]+)$') }}"
    alb_name: "alb-sg-test-{{ prefix_num }}"
    vpc_name: "vpc-test-{{ prefix_num }}"
  block:
    - name: Provision VPC
      ec2_vpc_net:
        cidr_block: 10.11.0.0/16
        name: "{{ vpc_name }}"
        state: present
      register: test_vpc
    - name: provision subnet
      ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        az: "{{ aws_region}}{{item.az}}"
        vpc_id: "{{ test_vpc.vpc.id }}"
        state: present
      loop:
        - { az: 'a', cidr: '10.11.0.0/24'}
        - { az: 'b', cidr: '10.11.1.0/24'}
      register: test_subnets_msg
    - name: provision igw
      ec2_vpc_igw:
        vpc_id: "{{ test_vpc.vpc.id }}"
        state: present
      register: test_igw
    - name: Create some groups for alb
      ec2_group:
        name: "{{ prefix_num }}-{{ item }}"
        description: "security group for Ansible ALB integration tests"
        state: present
        vpc_id: "{{ test_vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: sec_groups
      loop: ['x', 'y', 'z']
    - name: Provision an alb
      elb_application_lb:
        name: "{{ alb_name }}"
        security_groups:
          - "{{ sec_groups['results'][0]['group_id']}}"
        subnets:
          - "{{ test_subnets_msg['results'][0]['subnet']['id'] }}"
          - "{{ test_subnets_msg['results'][1]['subnet']['id'] }}"
        state: present
      register: alb
    - name: Attach a security group
      elb_security_group:
        alb_arn: "{{ alb.load_balancer_arn }}"
        security_group_ids:
          - "{{ sec_groups['results'][1]['group_id'] }}"
          - "{{ sec_groups['results'][2]['group_id'] }}"
      register: elb_sg_msg
    - assert:
        that:
          - elb_sg_msg['changed']
          - elb_sg_msg['response'] is defined
          - elb_sg_msg['response'] == 2

# Cleanup
  always:
    - name: remove alb
      elb_application_lb:
        name: "{{alb_name}}"
        state: absent
      ignore_errors: yes
    - name: remove sgs
      ec2_group:
        name: "{{ prefix_num }}-{{ item }}"
        state: absent
        vpc_id: "{{ test_vpc.vpc.id }}"
      loop: ['x', 'y', 'z']
    - name: remove subnet
      ec2_vpc_subnet:
        cidr: "{{ item.cidr }}"
        az: "{{ aws_region}}{{item.az}}"
        vpc_id: "{{ test_vpc.vpc.id }}"
        state: absent
      loop:
        - { az: 'a', cidr: '10.11.0.0/24'}
        - { az: 'b', cidr: '10.11.1.0/24'}
    - name: remove igw
      ec2_vpc_igw:
        vpc_id: "{{ test_vpc.vpc.id }}"
        state: absent
    - name: remove VPC
      ec2_vpc_net:
        cidr_block: 10.11.0.0/16
        name: "{{ vpc_name }}"
        state: absent
      register: remove_vpc
      retries: 10
      delay: 5
      until: remove_vpc is success
      ignore_errors: yes
