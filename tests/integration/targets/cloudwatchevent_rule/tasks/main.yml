---

- module_detauls:
  group/aws:
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    security_token: "{{ security_token | default(omit) }}"
    region: "{{ aws_region }}"

  block:
    - name: create an ECS cluster
      ecs_cluster:
        name: "{{ ecs_cluster_name }}"
        state: present
      register: ecs_cluster

    - name: create a VPC to work in
      ec2_vpc_net:
        cidr_block: 10.0.0.0/16
        state: present
        name: '{{ resource_prefix }}_ecs_cluster'
        resource_tags:
          Name: '{{ resource_prefix }}_ecs_cluster'
      register: setup_vpc

    - name: create subnet
      ec2_vpc_subnet:
        az: '{{ ec2_region }}a'
        tags:
          Name: '{{ resource_prefix }}_ecs_cluster-subnet-a'
        vpc_id: '{{ setup_vpc.vpc.id }}'
        cidr: 10.0.1.0/24
        state: present
      register: setup_subnet

    - name: create a security group
      ec2_group:
        name: '{{ resource_prefix }}_ecs_cluster-sg'
        description: 'created by Ansible integration tests'
        state: present
        vpc_id: '{{ setup_vpc.vpc.id }}'
        rules:
        - ports: 22
          cidr: 0.0.0.0/0
      register: setup_sg

    - name: create task definition
      ecs_taskdefinition:
        containers: "{{ ecs_fargate_task_containers }}"
        family: "{{ ecs_task_name }}"
        launch_type: FARGATE
        state: present
      register: ecs_task_definition

    - name: create cloudwatch event rule for integration test
      register: result
      cloudwatchevent_rule:
        name: '{{ resource_prefix }}'
        description: 'Run Foo'
        state: enabled
        schedule_expression: "rate(60 minutes)"
        targets:
        - id: run-job-foo
          arn: "{{ ecs_cluster.arn }}"
          role_arn: arn:aws:iam::123456789123:role/ecsEventsRole
          ecs_parameters:
            launch_type: FARGATE
            network_configuration:
              awsvpc_configuration:
                assign_public_ip: ENABLED
                security_groups:
                - "{{ setup_sg.group_id }}"
                subnets:
                - "{{ setup_subnet.id }}"
            task_definition_arn: "{{ ecs_task_definition.taskdefinition.taskDefinitionArn }}:{{ ecs_task_definition.taskdefinition.revision }}"
            task_count: 1

    - name: check created event rule
      asserts:
        that:
          - result is changed
          - result.rule.description == "Run Foo"
          - result.rule.name == "{{ resource_prefix }}"
          - result.schedule_expression == "rate(60 minutes)"
          - result.state == "ENABLED"
          - result.targets[0].arn == "{{ ecs_cluster.arn }}"
          - result.targets[0].id == "run-job-foo"
          - result.targets[0].ecs_parameters.launch_type == "FARGATE"
          - result.targets[0].ecs_parameters.network_configuration.awsvpc_configuration.assign_public_ip == "ENABLED"

    - name: update cloudwarch event rule with invalid launch type
      register: result
      cloudwatchevent_rule:
        name: '{{ resource_prefix }}'
        description: 'Run Foo'
        state: enabled
        schedule_expression: "rate(60 minutes)"
        targets:
        - id: run-job-foo
          arn: "{{ ecs_cluster.arn }}"
          role_arn: arn:aws:iam::123456789123:role/ecsEventsRole
          ecs_parameters:
            launch_type: INVALID_TYPE
            network_configuration:
              awsvpc_configuration:
                assign_public_ip: ENABLED
                security_groups:
                - "{{ setup_sg.group_id }}"
                subnets:
                - "{{ setup_subnet.id }}"
            task_definition_arn: "{{ ecs_task_definition.taskdefinition.taskDefinitionArn }}:{{ ecs_task_definition.taskdefinition.revision }}"
            task_count: 1

    - name: check event rule update with invalid launch type
      asserts:
        that:
          - result is not changed
          - result.error.code == "ValidationException"
          - "result.error.message == \"1 validation error detected: Value 'INVALID_TYPE' at 'targets.1.member.ecsParameters.launchType' failed to satisfy constraint: Member must satisfy enum value set: [FARGATE, EC2]\""

    - name: update cloudwarch event rule with invalid assign public ip option
      register: result
      cloudwatchevent_rule:
        name: '{{ resource_prefix }}'
        description: 'Run Foo'
        state: enabled
        schedule_expression: "rate(60 minutes)"
        targets:
        - id: run-job-foo
          arn: "{{ ecs_cluster.arn }}"
          role_arn: arn:aws:iam::123456789123:role/ecsEventsRole
          ecs_parameters:
            launch_type: FARGATE
            network_configuration:
              awsvpc_configuration:
                assign_public_ip: INVALID_OPTION
                security_groups:
                - "{{ setup_sg.group_id }}"
                subnets:
                - "{{ setup_subnet.id }}"
            task_definition_arn: "{{ ecs_task_definition.taskdefinition.taskDefinitionArn }}:{{ ecs_task_definition.taskdefinition.revision }}"
            task_count: 1

    - name: check event rule update with invalid assign public ip option
      asserts:
        that:
          - result is not changed
          - result.error.code == "ValidationException"
          - "result.error.message == \"1 validation error detected: Value 'INVALID_OPTION' at 'targets.1.member.ecsParameters.networkConfiguration.awsvpcConfiguration.assignPublicIp' failed to satisfy constraint: Member must satisfy enum value set: [ENABLED, DISABLED]\""

  always:
    - name: Announce teardown start
      debug:
        msg: "***** TESTING COMPLETE. COMMENCE TEARDOWN *****"

    - name: remove ecs task definition
      ecs_taskdefinition:
        containers: "{{ ecs_task_containers }}"
        family: "{{ ecs_task_name }}"
        revision: "{{ ecs_task_definition.taskdefinition.revision }}"
        state: absent
      vars:
        ecs_task_host_port: 8080
      ignore_errors: yes

    - name: remove security groups
      ec2_group:
        name: '{{ resource_prefix }}_ecs_cluster-sg'
        description: 'created by Ansible integration tests'
        state: absent
        vpc_id: '{{ setup_vpc.vpc.id }}'
      ignore_errors: yes

    - name: remove setup subnet
      ec2_vpc_subnet:
        az: '{{ aws_region }}a'
        vpc_id: '{{ setup_vpc.vpc.id }}'
        cidr: 10.0.1.0/24
        state: absent
      ignore_errors: yes

    - name: remove setup VPC
      ec2_vpc_net:
        cidr_block: 10.0.0.0/16
        state: absent
        name: '{{ resource_prefix }}_ecs_cluster'
      ignore_errors: yes

    - name: remove ECS cluster
      ecs_cluster:
        name: "{{ ecs_cluster_name }}"
        state: absent
      ignore_errors: yes
