---
- name: 'ec2_vpc_vgw integration tests'
  collections:
    - amazon.aws
  module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:

    # ============================================================
    - debug: msg="Setting up test dependencies"

    - name: create a VPC
      ec2_vpc_net:
        name: "{{ vpc_name }}-{{ item }}"
        state: present
        cidr_block: "{{ vpc_cidr }}"
        tags:
          Description: "Created by ansible-test for IGW tests"
      register: vpc_result
      loop: [1, 2]

    - name: use set fact for vpc ids
      set_fact:
        vpc_id_1: '{{ vpc_result.results.0.vpc.id }}'
        vpc_id_2: '{{ vpc_result.results.1.vpc.id }}'

    # ============================================================
    - debug: msg="Running tests"

    - name: create vpn gateway and attach it to vpc
      ec2_vpc_vgw:
        state: present
        vpc_id: '{{ vpc_id_1 }}'
        name: "{{ vgw_name }}"
      register: vgw

    - name: use set fact for vgw ids
      set_fact:
        vgw_id: '{{ vgw.vgw.id }}'

    - assert:
        that:
          - vgw.changed
          - vgw.vgw.vpc_id == vpc_id_1
          - vgw.vgw.tags.Name == vgw_name

    - name: test idempotence
      ec2_vpc_vgw:
        state: present
        vpc_id: '{{ vpc_id_1 }}'
        name: "{{ vgw_name }}"
      register: vgw

    - assert:
        that:
          - not vgw.changed
          - vgw.vgw.id == vgw_id

    # ============================================================
    - name: attach vpn gateway to the other VPC
      ec2_vpc_vgw:
        state: present
        vpc_id: '{{ vpc_id_2 }}'
        name: "{{ vgw_name }}"
      register: vgw

    - assert:
        that:
          - vgw.changed
          - vgw.vgw.id == vgw_id
          - vgw.vgw.vpc_id == vpc_id_2

    # ============================================================

    - name: get VPC VGW facts by ID (CHECK)
      ec2_vpc_vgw_info:
        vpn_gateway_ids: ['{{ vgw_id }}']
      register: vgw_info
      check_mode: True

    - name: verify expected facts
      vars:
        vgw_details: '{{ vgw_info.virtual_gateways[0] }}'
        attach_1_description:
            state: 'detached'
            vpc_id: '{{ vpc_id_1 }}'
        attach_2_description:
            state: 'attached'
            vpc_id: '{{ vpc_id_2 }}'
      assert:
        that:
          - vgw_info.virtual_gateways | length == 1
          - '"resource_tags" in vgw_details'
          - '"state" in vgw_details'
          - '"tags" in vgw_details'
          - '"type" in vgw_details'
          - '"vpc_attachments" in vgw_details'
          - '"vpn_gateway_id" in vgw_details'
          - vgw_details.vpn_gateway_id == vgw_id
          - vgw_details.type == 'ipsec.1'
          - vgw_details.state == 'available'
          - '"Name" in vgw_details.resource_tags'
          - vgw_details.resource_tags.Name == vgw_name
          - (
              attach_1_description in vgw_details.vpc_attachments
              and
              vgw_details.vpc_attachments | length == 2
            ) or ( vgw_details.vpc_attachments | length == 1 )
          - attach_2_description in vgw_details.vpc_attachments

    - name: get VPC VGW facts by Tag
      ec2_vpc_vgw_info:
        filters:
          "tag:Name": "{{ vgw_name }}"
      register: vgw_info

    - name: verify expected facts
      vars:
        vgw_details: '{{ vgw_info.virtual_gateways[0] }}'
        attach_1_description:
            state: 'detached'
            vpc_id: '{{ vpc_id_1 }}'
        attach_2_description:
            state: 'attached'
            vpc_id: '{{ vpc_id_2 }}'
      assert:
        that:
          - vgw_info.virtual_gateways | length == 1
          - '"resource_tags" in vgw_details'
          - '"state" in vgw_details'
          - '"tags" in vgw_details'
          - '"type" in vgw_details'
          - '"vpc_attachments" in vgw_details'
          - '"vpn_gateway_id" in vgw_details'
          - vgw_details.vpn_gateway_id == vgw_id
          - vgw_details.type == 'ipsec.1'
          - vgw_details.state == 'available'
          - '"Name" in vgw_details.resource_tags'
          - vgw_details.resource_tags.Name == vgw_name
          - (
              attach_1_description in vgw_details.vpc_attachments
              and
              vgw_details.vpc_attachments | length == 2
            ) or ( vgw_details.vpc_attachments | length == 1 )
          - attach_2_description in vgw_details.vpc_attachments

    # ============================================================

    - name: get all VGWs
      ec2_vpc_vgw_info:
      register: vgw_info

    - name: verify test VGW is in the results
      vars:
        vgw_id_list: '{{ vgw_info.virtual_gateways | map(attribute="vpn_gateway_id") | list }}'
      assert:
        that:
          - vgw_id in vgw_id_list

    # ============================================================

    - name: detach vpn gateway
      ec2_vpc_vgw:
        state: present
        name: "{{ vgw_name }}"
      register: vgw

    - assert:
        that:
          - vgw.changed
          - not vgw.vgw.vpc_id

    - name: test idempotence
      ec2_vpc_vgw:
        state: present
        name: "{{ vgw_name }}"
      register: vgw

    - assert:
        that:
          - not vgw.changed

    # ============================================================

    - include_tasks: 'tags.yml'

    # ============================================================

    - name: delete vpn gateway
      ec2_vpc_vgw:
        state: absent
        name: "{{ vgw_name }}"
      register: vgw

    - assert:
        that:
          - vgw.changed

    - name: test idempotence
      ec2_vpc_vgw:
        state: absent
        name: "{{ vgw_name }}"
      register: vgw

    - assert:
        that:
          - not vgw.changed

  always:

    - debug: msg="Removing test dependencies"

    - name: delete vpn gateway
      ec2_vpc_vgw:
        state: absent
        vpn_gateway_id: '{{ vgw.vgw.id | default(vgw_id) }}'
      ignore_errors: yes

    - name: delete vpc
      ec2_vpc_net:
        name: "{{ vpc_name }}-{{ item }}"
        state: absent
        cidr_block: "{{ vpc_cidr }}"
      loop: [1, 2]
      register: result
      retries: 10
      delay: 5
      until: result is not failed
      ignore_errors: true
