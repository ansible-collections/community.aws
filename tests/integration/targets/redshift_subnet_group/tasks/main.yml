---
# redshift_subnet_group integration tests
#
# Current module limitations:
# - check_mode not supported
# - Tagging not supported
# - Module is not idempotent
# - Returned values *very* limited
#
- module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:

    # ============================================================

    - name: Create Subnet Group with no subnets - check_mode
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
      register: create_group
      ignore_errors: True
      check_mode: True

    - name: Check result - Create Subnet Group with no subnets - check_mode
      assert:
        that:
          - create_group is failed
          # Check we caught the issue before trying to create
          - '"CreateClusterSubnetGroup" not in create_group.resource_actions'
          # Check that we don't refer to the boto3 parameter
          - '"subnetIds" not in create_group.msg'
          # Loosely check the message
          - '"subnet" in create_group.msg'
          - '"At least" in create_group.msg'

    - name: Create Subnet Group with no subnets
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
      register: create_group
      ignore_errors: True

    - name: Check result - Create Subnet Group with no subnets
      assert:
        that:
          - create_group is failed
          # Check we caught the issue before trying to create
          - '"CreateClusterSubnetGroup" not in create_group.resource_actions'
          # Check that we don't refer to the boto3 parameter
          - '"subnetIds" not in create_group.msg'
          # Loosely check the message
          - '"subnet" in create_group.msg'
          - '"At least" in create_group.msg'

    # ============================================================
    # Setup infra needed for tests
    - name: create a VPC
      ec2_vpc_net:
        state: present
        name: '{{ vpc_name }}'
        cidr_block: '{{ vpc_cidr }}'
        tags:
          TestPrefix: '{{ resource_prefix }}'
      register: vpc_result

    - name: create subnets
      ec2_vpc_subnet:
        state: present
        cidr: '{{ item.cidr }}'
        az: '{{ item.zone }}'
        vpc_id: '{{ vpc_result.vpc.id }}'
        tags:
          Name: '{{ item.name }}'
          TestPrefix: '{{ resource_prefix }}'
      register: vpc_subnet_create
      loop:
      - name: '{{ subnet_name_a }}'
        cidr: '{{ subnet_cidr_a }}'
        zone: '{{ subnet_zone_a }}'
      - name: '{{ subnet_name_b }}'
        cidr: '{{ subnet_cidr_b }}'
        zone: '{{ subnet_zone_b }}'
      - name: '{{ subnet_name_c }}'
        cidr: '{{ subnet_cidr_c }}'
        zone: '{{ subnet_zone_c }}'
      - name: '{{ subnet_name_d }}'
        cidr: '{{ subnet_cidr_d }}'
        zone: '{{ subnet_zone_d }}'

    - name: Store IDs of subnets and VPC
      set_fact:
        vpc_id: '{{ vpc_result.vpc.id }}'
        subnet_id_a: '{{ vpc_subnet_create.results[0].subnet.id }}'
        subnet_id_b: '{{ vpc_subnet_create.results[1].subnet.id }}'
        subnet_id_c: '{{ vpc_subnet_create.results[2].subnet.id }}'
        subnet_id_d: '{{ vpc_subnet_create.results[3].subnet.id }}'

    # ============================================================

    - name: Create Subnet Group - check_mode
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        group_description: '{{ description_default }}'
        group_subnets:
        - '{{ subnet_id_a }}'
        - '{{ subnet_id_b }}'
      register: create_group
      check_mode: True

    - name: Check result - Create Subnet Group - check_mode
      assert:
        that:
          - create_group is successful
          - create_group is changed

    - name: Create Subnet Group
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        group_description: '{{ description_default }}'
        group_subnets:
        - '{{ subnet_id_a }}'
        - '{{ subnet_id_b }}'
      register: create_group

    - name: Check result - Create Subnet Group
      assert:
        that:
          - create_group is successful
          - create_group is changed
          - '"group" in create_group'
          - '"name" in create_group.group'
          - '"vpc_id" in create_group.group'
          - create_group.group.name == group_name
          - create_group.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in create_group'
          - '"description" in create_group.cluster_subnet_group'
          - '"subnet_ids" in create_group.cluster_subnet_group'
          - '"vpc_id" in create_group.cluster_subnet_group'
          - create_group.cluster_subnet_group.name == group_name
          - create_group.cluster_subnet_group.description == description_default
          - subnet_id_a in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_b in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_c not in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_d not in create_group.cluster_subnet_group.subnet_ids
          - create_group.cluster_subnet_group.vpc_id == vpc_id

    - name: Create Subnet Group - idempotency - check_mode
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        group_description: '{{ description_default }}'
        group_subnets:
        - '{{ subnet_id_a }}'
        - '{{ subnet_id_b }}'
      register: create_group
      check_mode: True

    - name: Check result - Create Subnet Group - idempotency - check_mode
      assert:
        that:
          - create_group is successful
          - create_group is not changed

    - name: Create Subnet Group - idempotency
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        group_description: '{{ description_default }}'
        group_subnets:
        - '{{ subnet_id_a }}'
        - '{{ subnet_id_b }}'
      register: create_group

    - name: Check result - Create Subnet Group - idempotency
      assert:
        that:
          - create_group is successful
          - create_group is not changed
          - '"group" in create_group'
          - '"name" in create_group.group'
          - '"vpc_id" in create_group.group'
          - create_group.group.name == group_name
          - create_group.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in create_group'
          - '"description" in create_group.cluster_subnet_group'
          - '"subnet_ids" in create_group.cluster_subnet_group'
          - '"vpc_id" in create_group.cluster_subnet_group'
          - create_group.cluster_subnet_group.name == group_name
          - create_group.cluster_subnet_group.description == description_default
          - subnet_id_a in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_b in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_c not in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_d not in create_group.cluster_subnet_group.subnet_ids
          - create_group.cluster_subnet_group.vpc_id == vpc_id

    # ============================================================

    - name: Update Subnet Group Description - check_mode
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        group_description: '{{ description_updated }}'
        ## No longer mandatory
        # group_subnets:
        # - '{{ subnet_id_a }}'
        # - '{{ subnet_id_b }}'
      register: update_description
      check_mode: True

    - name: Check result - Update Subnet Group Description - check_mode
      assert:
        that:
          - update_description is successful
          - update_description is changed

    - name: Update Subnet Group Description
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        group_description: '{{ description_updated }}'
        ## No longer mandatory
        # group_subnets:
        # - '{{ subnet_id_a }}'
        # - '{{ subnet_id_b }}'
      register: update_description

    - name: Check result - Update Subnet Group Description
      assert:
        that:
          - update_description is successful
          - update_description is changed
          - '"group" in update_description'
          - '"name" in update_description.group'
          - '"vpc_id" in update_description.group'
          - update_description.group.name == group_name
          - update_description.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in update_description'
          - '"description" in update_description.cluster_subnet_group'
          - '"subnet_ids" in update_description.cluster_subnet_group'
          - '"vpc_id" in update_description.cluster_subnet_group'
          - update_description.cluster_subnet_group.name == group_name
          - update_description.cluster_subnet_group.description == description_updated
          - subnet_id_a in update_description.cluster_subnet_group.subnet_ids
          - subnet_id_b in update_description.cluster_subnet_group.subnet_ids
          - subnet_id_c not in update_description.cluster_subnet_group.subnet_ids
          - subnet_id_d not in update_description.cluster_subnet_group.subnet_ids
          - update_description.cluster_subnet_group.vpc_id == vpc_id

    - name: Update Subnet Group Description - idempotency - check_mode
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        group_description: '{{ description_updated }}'
        ## No longer mandatory
        # group_subnets:
        # - '{{ subnet_id_a }}'
        # - '{{ subnet_id_b }}'
      register: update_description
      check_mode: True

    - name: Check result - Update Subnet Group Description - idempotency - check_mode
      assert:
        that:
          - update_description is successful
          - update_description is not changed

    - name: Update Subnet Group Description - idempotency
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        group_description: '{{ description_updated }}'
        ## No longer mandatory
        # group_subnets:
        # - '{{ subnet_id_a }}'
        # - '{{ subnet_id_b }}'
      register: update_description

    - name: Check result - Update Subnet Group Description - idempotency
      assert:
        that:
          - update_description is successful
          - update_description is not changed
          - '"group" in update_description'
          - '"name" in update_description.group'
          - '"vpc_id" in update_description.group'
          - update_description.group.name == group_name
          - update_description.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in update_description'
          - '"description" in update_description.cluster_subnet_group'
          - '"subnet_ids" in update_description.cluster_subnet_group'
          - '"vpc_id" in update_description.cluster_subnet_group'
          - update_description.cluster_subnet_group.name == group_name
          - update_description.cluster_subnet_group.description == description_updated
          - subnet_id_a in update_description.cluster_subnet_group.subnet_ids
          - subnet_id_b in update_description.cluster_subnet_group.subnet_ids
          - subnet_id_c not in update_description.cluster_subnet_group.subnet_ids
          - subnet_id_d not in update_description.cluster_subnet_group.subnet_ids
          - update_description.cluster_subnet_group.vpc_id == vpc_id

    # ============================================================

    - name: Update Subnet Group subnets - check_mode
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        ## No longer mandatory
        # group_description: '{{ description_updated }}'
        group_subnets:
        - '{{ subnet_id_c }}'
        - '{{ subnet_id_d }}'
      register: update_subnets
      check_mode: True

    - name: Check result - Update Subnet Group subnets - check_mode
      assert:
        that:
          - update_subnets is successful
          - update_subnets is changed

    - name: Update Subnet Group subnets
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        ## No longer mandatory
        # group_description: '{{ description_updated }}'
        group_subnets:
        - '{{ subnet_id_c }}'
        - '{{ subnet_id_d }}'
      register: update_subnets

    - name: Check result - Update Subnet Group subnets
      assert:
        that:
          - update_subnets is successful
          - update_subnets is changed
          - '"group" in update_subnets'
          - '"name" in update_subnets.group'
          - '"vpc_id" in update_subnets.group'
          - update_subnets.group.name == group_name
          - update_subnets.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in update_subnets'
          - '"description" in update_subnets.cluster_subnet_group'
          - '"subnet_ids" in update_subnets.cluster_subnet_group'
          - '"vpc_id" in update_subnets.cluster_subnet_group'
          - update_subnets.cluster_subnet_group.name == group_name
          - update_subnets.cluster_subnet_group.description == description_updated
          - subnet_id_a not in update_subnets.cluster_subnet_group.subnet_ids
          - subnet_id_b not in update_subnets.cluster_subnet_group.subnet_ids
          - subnet_id_c in update_subnets.cluster_subnet_group.subnet_ids
          - subnet_id_d in update_subnets.cluster_subnet_group.subnet_ids
          - update_subnets.cluster_subnet_group.vpc_id == vpc_id

    - name: Update Subnet Group subnets - idempotency - check_mode
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        ## No longer mandatory
        # group_description: '{{ description_updated }}'
        group_subnets:
        - '{{ subnet_id_c }}'
        - '{{ subnet_id_d }}'
      register: update_subnets
      check_mode: True

    - name: Check result - Update Subnet Group subnets - idempotency - check_mode
      assert:
        that:
          - update_subnets is successful
          - update_subnets is not changed

    - name: Update Subnet Group subnets - idempotency
      redshift_subnet_group:
        state: present
        group_name: '{{ group_name }}'
        ## No longer mandatory
        # group_description: '{{ description_updated }}'
        group_subnets:
        - '{{ subnet_id_c }}'
        - '{{ subnet_id_d }}'
      register: update_subnets

    - name: Check result - Update Subnet Group subnets - idempotency
      assert:
        that:
          - update_subnets is successful
          - update_subnets is not changed
          - '"group" in update_subnets'
          - '"name" in update_subnets.group'
          - '"vpc_id" in update_subnets.group'
          - update_subnets.group.name == group_name
          - update_subnets.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in update_subnets'
          - '"description" in update_subnets.cluster_subnet_group'
          - '"subnet_ids" in update_subnets.cluster_subnet_group'
          - '"vpc_id" in update_subnets.cluster_subnet_group'
          - update_subnets.cluster_subnet_group.name == group_name
          - update_subnets.cluster_subnet_group.description == description_updated
          - subnet_id_a not in update_subnets.cluster_subnet_group.subnet_ids
          - subnet_id_b not in update_subnets.cluster_subnet_group.subnet_ids
          - subnet_id_c in update_subnets.cluster_subnet_group.subnet_ids
          - subnet_id_d in update_subnets.cluster_subnet_group.subnet_ids
          - update_subnets.cluster_subnet_group.vpc_id == vpc_id

    # ============================================================

    - name: Delete Subnet Group - check_mode
      redshift_subnet_group:
        state: absent
        group_name: '{{ group_name }}'
      register: delete_group
      check_mode: True

    - name: Check result - Delete Subnet Group - check_mode
      assert:
        that:
          - delete_group is changed

    - name: Delete Subnet Group
      redshift_subnet_group:
        state: absent
        group_name: '{{ group_name }}'
      register: delete_group

    - name: Check result - Delete Subnet Group
      assert:
        that:
          - delete_group is changed

    - name: Delete Subnet Group - idempotency - check_mode
      redshift_subnet_group:
        state: absent
        group_name: '{{ group_name }}'
      register: delete_group
      check_mode: True

    - name: Check result - Delete Subnet Group - idempotency - check_mode
      assert:
        that:
          - delete_group is not changed

    - name: Delete Subnet Group - idempotency
      redshift_subnet_group:
        state: absent
        group_name: '{{ group_name }}'
      register: delete_group

    - name: Check result - Delete Subnet Group - idempotency
      assert:
        that:
          - delete_group is not changed

    # ============================================================

    - name: Create minimal Subnet Group - check_mode
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
        subnets:
        - '{{ subnet_id_a }}'
      register: create_group
      check_mode: True

    - name: Check result - Create minimal Subnet Group - check_mode
      assert:
        that:
          - create_group is successful
          - create_group is changed

    - name: Create minimal Subnet Group
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
        subnets:
        - '{{ subnet_id_a }}'
      register: create_group

    - name: Check result - Create minimal Subnet Group
      assert:
        that:
          - create_group is successful
          - create_group is changed
          - '"group" in create_group'
          - '"name" in create_group.group'
          - '"vpc_id" in create_group.group'
          - create_group.group.name == group_name
          - create_group.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in create_group'
          - '"description" in create_group.cluster_subnet_group'
          - '"subnet_ids" in create_group.cluster_subnet_group'
          - '"vpc_id" in create_group.cluster_subnet_group'
          - create_group.cluster_subnet_group.name == group_name
          - create_group.cluster_subnet_group.description == group_name
          - subnet_id_a in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_b not in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_c not in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_d not in create_group.cluster_subnet_group.subnet_ids
          - create_group.cluster_subnet_group.vpc_id == vpc_id

    - name: Create minimal Subnet Group - idempotency - check_mode
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
        subnets:
        - '{{ subnet_id_a }}'
      register: create_group
      check_mode: True

    - name: Check result - Create minimal Subnet Group - idempotency - check_mode
      assert:
        that:
          - create_group is successful
          - create_group is not changed

    - name: Create minimal Subnet Group - idempotency
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
        subnets:
        - '{{ subnet_id_a }}'
      register: create_group

    - name: Check result - Create minimal Subnet Group - idempotency
      assert:
        that:
          - create_group is successful
          - create_group is not changed
          - '"group" in create_group'
          - '"name" in create_group.group'
          - '"vpc_id" in create_group.group'
          - create_group.group.name == group_name
          - create_group.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in create_group'
          - '"description" in create_group.cluster_subnet_group'
          - '"subnet_ids" in create_group.cluster_subnet_group'
          - '"vpc_id" in create_group.cluster_subnet_group'
          - create_group.cluster_subnet_group.name == group_name
          - create_group.cluster_subnet_group.description == group_name
          - subnet_id_a in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_b not in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_c not in create_group.cluster_subnet_group.subnet_ids
          - subnet_id_d not in create_group.cluster_subnet_group.subnet_ids
          - create_group.cluster_subnet_group.vpc_id == vpc_id

    # ============================================================

    - name: Full Update Subnet Group - check_mode
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
        description: '{{ description_updated }}'
        subnets:
        - '{{ subnet_id_a }}'
        - '{{ subnet_id_b }}'
      register: update_complex
      check_mode: True

    - name: Check result - Full Update Subnet Group - check_mode
      assert:
        that:
          - update_complex is successful
          - update_complex is changed

    - name: Full Update Subnet Group
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
        description: '{{ description_updated }}'
        subnets:
        - '{{ subnet_id_a }}'
        - '{{ subnet_id_b }}'
      register: update_complex

    - name: Check result - Full Update Subnet Group
      assert:
        that:
          - update_complex is successful
          - update_complex is changed
          - '"group" in update_complex'
          - '"name" in update_complex.group'
          - '"vpc_id" in update_complex.group'
          - update_complex.group.name == group_name
          - update_complex.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in update_complex'
          - '"description" in update_complex.cluster_subnet_group'
          - '"subnet_ids" in update_complex.cluster_subnet_group'
          - '"vpc_id" in update_complex.cluster_subnet_group'
          - update_complex.cluster_subnet_group.name == group_name
          - update_complex.cluster_subnet_group.description == description_updated
          - subnet_id_a in update_complex.cluster_subnet_group.subnet_ids
          - subnet_id_b in update_complex.cluster_subnet_group.subnet_ids
          - subnet_id_c not in update_complex.cluster_subnet_group.subnet_ids
          - subnet_id_d not in update_complex.cluster_subnet_group.subnet_ids
          - update_complex.cluster_subnet_group.vpc_id == vpc_id

    - name: Full Update Subnet Group - idempotency - check_mode
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
        description: '{{ description_updated }}'
        subnets:
        - '{{ subnet_id_a }}'
        - '{{ subnet_id_b }}'
      register: update_complex
      check_mode: True

    - name: Check result - Full Update Subnet Group - idempotency - check_mode
      assert:
        that:
          - update_complex is successful
          - update_complex is not changed

    - name: Full Update Subnet Group - idempotency
      redshift_subnet_group:
        state: present
        name: '{{ group_name }}'
        description: '{{ description_updated }}'
        subnets:
        - '{{ subnet_id_a }}'
        - '{{ subnet_id_b }}'
      register: update_complex

    - name: Check result - Full Update Subnet Group - idempotency
      assert:
        that:
          - update_complex is successful
          - update_complex is not changed
          - '"group" in update_complex'
          - '"name" in update_complex.group'
          - '"vpc_id" in update_complex.group'
          - update_complex.group.name == group_name
          - update_complex.group.vpc_id == vpc_id
          - '"cluster_subnet_group" in update_complex'
          - '"description" in update_complex.cluster_subnet_group'
          - '"subnet_ids" in update_complex.cluster_subnet_group'
          - '"vpc_id" in update_complex.cluster_subnet_group'
          - update_complex.cluster_subnet_group.name == group_name
          - update_complex.cluster_subnet_group.description == description_updated
          - subnet_id_a in update_complex.cluster_subnet_group.subnet_ids
          - subnet_id_b in update_complex.cluster_subnet_group.subnet_ids
          - subnet_id_c not in update_complex.cluster_subnet_group.subnet_ids
          - subnet_id_d not in update_complex.cluster_subnet_group.subnet_ids
          - update_complex.cluster_subnet_group.vpc_id == vpc_id

    # ============================================================

    - name: Delete Subnet Group
      redshift_subnet_group:
        state: absent
        name: '{{ group_name }}'
      register: delete_group

    - name: Check result - Delete Subnet Group
      assert:
        that:
          - delete_group is changed

  always:

    ################################################
    # TEARDOWN STARTS HERE
    ################################################

    - name: Delete Subnet Group
      redshift_subnet_group:
        state: absent
        group_name: '{{ group_name }}'
      ignore_errors: True

    - name: tidy up subnet
      ec2_vpc_subnet:
        state: absent
        cidr: '{{ item }}'
        vpc_id: '{{ vpc_result.vpc.id }}'
      loop:
      - '{{ subnet_cidr_a }}'
      - '{{ subnet_cidr_b }}'
      - '{{ subnet_cidr_c }}'
      - '{{ subnet_cidr_d }}'
      ignore_errors: True

    - name: tidy up VPC
      ec2_vpc_net:
        state: absent
        name: '{{ vpc_name }}'
        cidr_block: '{{ vpc_cidr }}'
      ignore_errors: True
