---
#
# Basic manipulation of Domain List based rule groups
# - Creation
# - Deletion
# - Updating Rules
# -- Domain list
# -- Inspected Protocols
# -- Action
# -- Source IPs
- vars:
    domains_group_name: '{{ group_name_prefix }}-DomainListGroup'
  block:
    ###################################################################
    # Creation

    # Bare minimum rule, wouldn't actually check anything since neither HTTP not
    # HTTPS traffic is being inspected
    - name: '(CHECK) Create a Domain List Rule Group'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        capacity: 50
        domain_list:
          domain_names: 'example.com'
          action: allow
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com']

    - name: 'Create a Domain List Rule Group'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        capacity: 50
        domain_list:
          domain_names: 'example.com'
          action: allow
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn.startswith(account_arn)
          - domain_group.rule_group.rule_group_metadata.rule_group_arn.endswith(domains_group_name)
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com']

    - name: Save RuleGroup ID/ARN for later
      set_fact:
        minimal_rule_group_id: '{{ domain_group.rule_group.rule_group_metadata.rule_group_id }}'
        minimal_rule_group_arn: '{{ domain_group.rule_group.rule_group_metadata.rule_group_arn }}'

    - name: '(CHECK) Create a Domain List Rule Group (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        capacity: 50
        domain_list:
          domain_names: 'example.com'
          action: allow
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com']

    - name: 'Create a Domain List Rule Group (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        capacity: 50
        domain_list:
          domain_names: 'example.com'
          action: allow
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com']

    #####

    - name: '(CHECK) Create a Domain List Rule Group - List instead of string (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        capacity: 50
        domain_list:
          domain_names:
            - 'example.com'
          action: allow
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com']

    - name: 'Create a Domain List Rule Group List - instead of string (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        capacity: 50
        domain_list:
          domain_names:
            - 'example.com'
          action: allow
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com']


    ###################################################################
    # Update

    - name: '(CHECK) Update a Domain List Rule Group with new domains'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: allow
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with new domains'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: allow
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: '(CHECK) Update a Domain List Rule Group with new domains (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: allow
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with new domains (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: allow
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'ALLOWLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    #####

    - name: '(CHECK) Update a Domain List Rule Group with new action'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with new action'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: '(CHECK) Update a Domain List Rule Group with new action (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with new action (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    #####

    - name: '(CHECK) Update a Domain List Rule Group with HTTP only'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with HTTP only'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: '(CHECK) Update a Domain List Rule Group with HTTP only (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with HTTP only (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    #####

    - name: '(CHECK) Update a Domain List Rule Group with HTTPS only'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_https: true
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with HTTPS only'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_https: true
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: '(CHECK) Update a Domain List Rule Group with HTTPS only (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_https: true
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with HTTPS only (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_https: true
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    #####

    - name: '(CHECK) Update a Domain List Rule Group with HTTP and HTTPS'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with HTTP and HTTPS'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: '(CHECK) Update a Domain List Rule Group with HTTP and HTTPS (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with HTTP and HTTPS (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    #####

    - name: '(CHECK) Update a Domain List Rule Group with Source IP list'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
          source_ips: '203.0.113.0/24'
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - '"ip_sets" in domain_group.rule_group.rule_group.rule_variables'
          - '"HOME_NET" in domain_group.rule_group.rule_group.rule_variables.ip_sets'
          - domain_group.rule_group.rule_group.rule_variables.ip_sets['HOME_NET'] == ['203.0.113.0/24']

    - name: 'Update a Domain List Rule Group with Source IP list'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
          source_ips: '203.0.113.0/24'
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - '"ip_sets" in domain_group.rule_group.rule_group.rule_variables'
          - '"HOME_NET" in domain_group.rule_group.rule_group.rule_variables.ip_sets'
          - domain_group.rule_group.rule_group.rule_variables.ip_sets['HOME_NET'] == ['203.0.113.0/24']

    - name: '(CHECK) Update a Domain List Rule Group with Source IP list (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
          source_ips: '203.0.113.0/24'
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - '"ip_sets" in domain_group.rule_group.rule_group.rule_variables'
          - '"HOME_NET" in domain_group.rule_group.rule_group.rule_variables.ip_sets'
          - domain_group.rule_group.rule_group.rule_variables.ip_sets['HOME_NET'] == ['203.0.113.0/24']

    - name: 'Update a Domain List Rule Group with Source IP list (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
          source_ips: '203.0.113.0/24'
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - '"ip_sets" in domain_group.rule_group.rule_group.rule_variables'
          - '"HOME_NET" in domain_group.rule_group.rule_group.rule_variables.ip_sets'
          - domain_group.rule_group.rule_group.rule_variables.ip_sets['HOME_NET'] == ['203.0.113.0/24']

    #####

    - name: '(CHECK) Update a Domain List Rule Group with updated Source IP list'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
          source_ips:
            - '203.0.113.0/24'
            - '198.51.100.248'
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - '"ip_sets" in domain_group.rule_group.rule_group.rule_variables'
          - '"HOME_NET" in domain_group.rule_group.rule_group.rule_variables.ip_sets'
          - domain_group.rule_group.rule_group.rule_variables.ip_sets['HOME_NET'] == ['203.0.113.0/24', '198.51.100.248']

    - name: 'Update a Domain List Rule Group with updated Source IP list'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
          source_ips:
            - '203.0.113.0/24'
            - '198.51.100.248'
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - '"ip_sets" in domain_group.rule_group.rule_group.rule_variables'
          - '"HOME_NET" in domain_group.rule_group.rule_group.rule_variables.ip_sets'
          - domain_group.rule_group.rule_group.rule_variables.ip_sets['HOME_NET'] == ['203.0.113.0/24', '198.51.100.248']

    - name: '(CHECK) Update a Domain List Rule Group with updated Source IP list (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
          source_ips:
            - '203.0.113.0/24'
            - '198.51.100.248'
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - '"ip_sets" in domain_group.rule_group.rule_group.rule_variables'
          - '"HOME_NET" in domain_group.rule_group.rule_group.rule_variables.ip_sets'
          - domain_group.rule_group.rule_group.rule_variables.ip_sets['HOME_NET'] == ['203.0.113.0/24', '198.51.100.248']

    - name: 'Update a Domain List Rule Group with updated Source IP list (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
          source_ips:
            - '203.0.113.0/24'
            - '198.51.100.248'
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - '"ip_sets" in domain_group.rule_group.rule_group.rule_variables'
          - '"HOME_NET" in domain_group.rule_group.rule_group.rule_variables.ip_sets'
          - domain_group.rule_group.rule_group.rule_variables.ip_sets['HOME_NET'] == ['203.0.113.0/24', '198.51.100.248']

    #####

    - name: '(CHECK) Update a Domain List Rule Group with removed Source IP list'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - domain_group.rule_group.rule_group.rule_variables == {}

    - name: 'Update a Domain List Rule Group with removed Source IP list'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - domain_group.rule_group.rule_group.rule_variables == {}

    - name: '(CHECK) Update a Domain List Rule Group with removed Source IP list (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - domain_group.rule_group.rule_group.rule_variables == {}

    - name: 'Update a Domain List Rule Group with removed Source IP list (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
          filter_http: true
          filter_https: true
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == ['HTTP_HOST', 'TLS_SNI']
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']
          - '"rule_variables" in domain_group.rule_group.rule_group'
          - domain_group.rule_group.rule_group.rule_variables == {}

    #####

    - name: '(CHECK) Update a Domain List Rule Group with no protocols'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with no protocols'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
      register: domain_group

    - assert:
        that:
          - domain_group is changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_arn" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_id" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: '(CHECK) Update a Domain List Rule Group with no protocols (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    - name: 'Update a Domain List Rule Group with no protocols (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        domain_list:
          domain_names:
          - 'example.com'
          - '.example.net'
          action: deny
      register: domain_group

    - assert:
        that:
          - domain_group is not changed
          - '"rule_group" in domain_group'
          - '"rule_group" in domain_group.rule_group'
          - '"rule_group_metadata" in domain_group.rule_group'
          - '"capacity" in domain_group.rule_group.rule_group_metadata'
          - '"rule_group_name" in domain_group.rule_group.rule_group_metadata'
          - '"type" in domain_group.rule_group.rule_group_metadata'
          - domain_group.rule_group.rule_group_metadata.type == 'STATEFUL'
          - domain_group.rule_group.rule_group_metadata.capacity == 50
          - domain_group.rule_group.rule_group_metadata.rule_group_name == domains_group_name
          - domain_group.rule_group.rule_group_metadata.rule_group_arn == minimal_rule_group_arn
          - domain_group.rule_group.rule_group_metadata.rule_group_id == minimal_rule_group_id
          - '"rules_source" in domain_group.rule_group.rule_group'
          - '"rules_source_list" in domain_group.rule_group.rule_group.rules_source'
          - '"generated_rules_type" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"target_types" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - '"targets" in domain_group.rule_group.rule_group.rules_source.rules_source_list'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.generated_rules_type == 'DENYLIST'
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.target_types == []
          - domain_group.rule_group.rule_group.rules_source.rules_source_list.targets == ['example.com', '.example.net']

    ###################################################################
    # Deletion

    - name: '(CHECK) Delete Domain List rule group'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        state: absent
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is changed

    - name: 'Delete Domain List rule group'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        state: absent
      register: domain_group

    - assert:
        that:
          - domain_group is changed

    # The Rule Group may still exist in a "DELETING" state, we should still
    # return not changed
    - name: 'Delete Domain List rule group (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        state: absent
        wait: False
      register: domain_group
      check_mode: true

    - assert:
        that:
          - domain_group is not changed

    - name: '(CHECK) Delete Domain List rule group (idempotency)'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        state: absent
        wait: False
      register: domain_group

    - assert:
        that:
          - domain_group is not changed

  always:
    - name: '(always) Delete Domain List rule group'
      networkfirewall_rule_group:
        name: '{{ domains_group_name }}'
        type: 'stateful'
        state: absent
        wait: False
      ignore_errors: true
