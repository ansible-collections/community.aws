---
- name: 'aws_config integration tests'
  collections:
    - amazon.aws
  module_defaults:
    group/aws:
      access_key: '{{ aws_access_key }}'
      secret_key: '{{ aws_secret_key }}'
      session_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  block:

    # ============================================================
    # Prerequisites
    # ============================================================
    - name: get ARN of calling user
      aws_caller_info:
      register: aws_caller_info

    - name: Store Account ID for later use
      set_fact:
        aws_account_id: "{{ aws_caller_info.account }}"

    - name: ensure IAM role exists
      iam_role:
        name: '{{ config_role_name }}'
        assume_role_policy_document: "{{ lookup('file','config-trust-policy.json') }}"
        state: present
        create_instance_profile: no
        managed_policy:
        - arn:aws:iam::aws:policy/service-role/AWS_ConfigRole
      register: config_iam_role

    - name: ensure SNS topic exists
      sns_topic:
        name: '{{ config_sns_name }}'
        state: present
        subscriptions:
          - endpoint: "rando_email_address@rando.com"
            protocol: "email"
      register: config_sns_topic

    - name: ensure S3 bucket exists
      s3_bucket:
        name: "{{ config_s3_bucket }}"

    - name: ensure KMS key exists
      kms_key:
        alias: "{{ config_kms_key }}"
        policy: "{{ lookup('template', 'config-kms-policy.json.j2') }}"
      register: kms_key

    - name: ensure S3 access for IAM role
      iam_policy:
        iam_type: role
        iam_name: '{{ config_role_name }}'
        policy_name: AwsConfigRecorderTestRoleS3Policy
        state: present
        policy_json: "{{ lookup( 'template', 'config-s3-policy.json.j2') }}"

    # ============================================================
    # Module requirement testing
    # ============================================================
    - name: test rule with no source parameter
      config_rule:
        name: random_name
        state: present
      register: output
      ignore_errors: true

    - name: assert failure when called with no source parameter
      assert:
        that:
           - output.failed
           - 'output.msg.startswith("missing required arguments:")'

    - name: test resource_type delivery_channel with no s3_bucket parameter
      config_delivery_channel:
        name: random_name
        state: present
      register: output
      ignore_errors: true

    - name: assert failure when called with no s3_bucket parameter
      assert:
        that:
           - output.failed
           - 'output.msg.startswith("missing required arguments:")'

    - name: test resource_type configuration_recorder with no role_arn parameter
      config_recorder:
        name: random_name
        state: present
      register: output
      ignore_errors: true

    - name: assert failure when called with no role_arn parameter
      assert:
        that:
           - output.failed
           - 'output.msg.startswith("state is present but all of the following are missing")'

    - name: test resource_type configuration_recorder with no recording_group parameter
      config_recorder:
        name: random_name
        state: present
        role_arn: 'arn:aws:iam::123456789012:role/AwsConfigRecorder'
      register: output
      ignore_errors: true

    - name: assert failure when called with no recording_group parameter
      assert:
        that:
           - output.failed
           - 'output.msg.startswith("state is present but all of the following are missing")'

    - name: test resource_type aggregation_authorization with no authorized_account_id parameter
      config_aggregation_authorization:
        state: present
      register: output
      ignore_errors: true

    - name: assert failure when called with no authorized_account_id parameter
      assert:
        that:
           - output.failed
           - 'output.msg.startswith("missing required arguments:")'

    - name: test resource_type aggregation_authorization with no authorized_aws_region parameter
      config_aggregation_authorization:
        state: present
        authorized_account_id: '123456789012'
      register: output
      ignore_errors: true

    - name: assert failure when called with no authorized_aws_region parameter
      assert:
        that:
           - output.failed
           - 'output.msg.startswith("missing required arguments:")'

    - name: test resource_type configuration_aggregator with no account_sources parameter
      config_aggregator:
        name: random_name
        state: present
      register: output
      ignore_errors: true

    - name: assert failure when called with no account_sources parameter
      assert:
        that:
           - output.failed
           - 'output.msg.startswith("missing required arguments: account_sources")'

    - name: test resource_type configuration_aggregator with no organization_source parameter
      config_aggregator:
        name: random_name
        state: present
        account_sources: []
      register: output
      ignore_errors: true

    - name: assert failure when called with no organization_source parameter
      assert:
        that:
           - output.failed
           - 'output.msg.startswith("missing required arguments: organization_source")'

    # ============================================================
    # Creation testing
    # ============================================================
    - name: Create Configuration Recorder for AWS Config
      config_recorder:
        name: '{{ resource_prefix }}-recorder'
        state: present
        role_arn: "{{ config_iam_role.arn }}"
        recording_group:
            all_supported: true
            include_global_types: true
      register: output

    - assert:
        that:
          - output.changed

    - name: Create Delivery Channel for AWS Config
      config_delivery_channel:
        name: '{{ resource_prefix }}-channel'
        state: present
        s3_bucket: "{{ config_s3_bucket }}"
        s3_prefix: "foo/bar"
        sns_topic_arn: "{{ config_sns_topic.sns_arn }}"
        delivery_frequency: 'Twelve_Hours'
      register: output

    - assert:
        that:
          - output.changed

    - name: Create Delivery Channel for AWS Config with a KMS key
      config_delivery_channel:
        name: '{{ resource_prefix }}-channel'
        state: present
        s3_bucket: "{{ config_s3_bucket }}"
        s3_prefix: "foo/bar"
        kms_key_arn: "{{ kms_key.key_arn }}"
        sns_topic_arn: "{{ config_sns_topic.sns_arn }}"
        delivery_frequency: 'Twelve_Hours'
      register: output

    - assert:
        that:
          - output.changed

    - name: Create Config Rule for AWS Config
      config_rule:
        name: '{{ resource_prefix }}-rule'
        state: present
        description: 'This AWS Config rule checks for public write access on S3 buckets'
        scope:
            compliance_types:
                - 'AWS::S3::Bucket'
        source:
            owner: AWS
            identifier: 'S3_BUCKET_PUBLIC_WRITE_PROHIBITED'
      register: output

    - assert:
        that:
          - output.changed

    - name: Create aws_config_aggregator
      config_aggregator:
        name: random_name
        state: present
        account_sources: []
        organization_source:
          all_aws_regions: true
          role_arn: "{{ config_iam_role.arn }}"
      register: output

    - name: assert success
      assert:
        that:
           - output is changed

    - name: Create aws_config_aggregator - idempotency
      config_aggregator:
        name: random_name
        state: present
        account_sources: []
        organization_source:
          all_aws_regions: true
          role_arn: "{{ config_iam_role.arn }}"
      register: output

    - name: assert not changed
      assert:
        that:
           - output is not changed

    # ============================================================
    # Update testing
    # ============================================================
    - name: Update Configuration Recorder
      config_recorder:
        name: '{{ resource_prefix }}-recorder'
        state: present
        role_arn: "{{ config_iam_role.arn }}"
        recording_group:
            all_supported: false
            include_global_types: false
            resource_types:
              - 'AWS::S3::Bucket'
      register: output

    - assert:
        that:
          - output.changed

    - name: Update Delivery Channel
      config_delivery_channel:
        name: '{{ resource_prefix }}-channel'
        state: present
        s3_bucket: "{{ config_s3_bucket }}"
        sns_topic_arn: "{{ config_sns_topic.sns_arn }}"
        delivery_frequency: 'TwentyFour_Hours'
      register: output

    - assert:
        that:
          - output.changed

    - name: Update Delivery Channel with KMS key
      config_delivery_channel:
        name: '{{ resource_prefix }}-channel'
        state: present
        s3_bucket: "{{ config_s3_bucket }}"
        sns_topic_arn: "{{ config_sns_topic.sns_arn }}"
        kms_key_arn: "{{ kms_key.key_arn }}"
        delivery_frequency: 'TwentyFour_Hours'
      register: output

    - assert:
        that:
          - output.changed

    - name: Update Config Rule
      config_rule:
        name: '{{ resource_prefix }}-rule'
        state: present
        description: 'This AWS Config rule checks for public write access on S3 buckets'
        scope:
            compliance_types:
                - 'AWS::S3::Bucket'
        source:
            owner: AWS
            identifier: 'S3_BUCKET_PUBLIC_READ_PROHIBITED'
      register: output

    - assert:
        that:
          - output.changed

    - name: Update Config Rule - idempotency
      config_rule:
        name: '{{ resource_prefix }}-rule'
        state: present
        description: 'This AWS Config rule checks for public write access on S3 buckets'
        scope:
            compliance_types:
                - 'AWS::S3::Bucket'
        source:
            owner: AWS
            identifier: 'S3_BUCKET_PUBLIC_READ_PROHIBITED'
      register: output

    - assert:
        that:
          - output is not changed

    - name: Update aws_config_aggregator
      config_aggregator:
        name: random_name
        state: present
        account_sources: []
        organization_source:
          all_aws_regions: false
          aws_regions:
            - '{{ aws_region }}'
          role_arn: "{{ config_iam_role.arn }}"
      register: output

    - name: assert success
      assert:
        that:
           - output is changed

    - name: Update aws_config_aggregator - idempotency
      config_aggregator:
        name: random_name
        state: present
        account_sources: []
        organization_source:
          all_aws_regions: false
          aws_regions:
            - '{{ aws_region }}'
          role_arn: "{{ config_iam_role.arn }}"
      register: output

    - name: assert success
      assert:
        that:
           - output is not changed

    # ============================================================
    # Read testing
    # ============================================================
    - name: Don't update Configuration Recorder
      config_recorder:
        name: '{{ resource_prefix }}-recorder'
        state: present
        role_arn: "{{ config_iam_role.arn }}"
        recording_group:
            all_supported: false
            include_global_types: false
            resource_types:
              - 'AWS::S3::Bucket'
      register: output

    - assert:
        that:
          - not output.changed

    - name: Don't update Delivery Channel
      config_delivery_channel:
        name: '{{ resource_prefix }}-channel'
        state: present
        s3_bucket: "{{ config_s3_bucket }}"
        sns_topic_arn: "{{ config_sns_topic.sns_arn }}"
        delivery_frequency: 'TwentyFour_Hours'
      register: output

    - assert:
        that:
          - not output.changed

    - name: Don't update Config Rule
      config_rule:
        name: '{{ resource_prefix }}-rule'
        state: present
        description: 'This AWS Config rule checks for public write access on S3 buckets'
        scope:
            compliance_types:
                - 'AWS::S3::Bucket'
        source:
            owner: AWS
            identifier: 'S3_BUCKET_PUBLIC_READ_PROHIBITED'
      register: output

    - assert:
        that:
          - not output.changed

  always:

    - name: delete aws_config_aggregator
      config_aggregator:
        name: random_name
        state: absent
      register: output
      ignore_errors: true

    # ============================================================
    # Destroy testing
    # ============================================================
    - name: Destroy Configuration Recorder
      config_recorder:
        name: '{{ resource_prefix }}-recorder'
        state: absent
      register: output
      ignore_errors: true

#    - assert:
#        that:
#          - output.changed

    - name: Destroy Delivery Channel
      config_delivery_channel:
        name: '{{ resource_prefix }}-channel'
        state: absent
        s3_bucket: "{{ config_s3_bucket }}"
        sns_topic_arn: "{{ config_sns_topic.sns_arn }}"
        delivery_frequency: 'TwentyFour_Hours'
      register: output
      ignore_errors: true

#    - assert:
#        that:
#          - output.changed

    - name: Destroy Config Rule
      config_rule:
        name: '{{ resource_prefix }}-rule'
        state: absent
        description: 'This AWS Config rule checks for public write access on S3 buckets'
        scope:
            compliance_types:
                - 'AWS::S3::Bucket'
        source:
            owner: AWS
            identifier: 'S3_BUCKET_PUBLIC_READ_PROHIBITED'
      register: output
      ignore_errors: true

#    - assert:
#        that:
#          - output.changed

    # ============================================================
    # Clean up prerequisites
    # ============================================================
    - name: remove S3 access from IAM role
      iam_policy:
        iam_type: role
        iam_name: '{{ config_role_name }}'
        policy_name: AwsConfigRecorderTestRoleS3Policy
        state: absent
        policy_json: "{{ lookup( 'template', 'config-s3-policy.json.j2') }}"
      ignore_errors: true

    - name: remove IAM role
      iam_role:
        name: '{{ config_role_name }}'
        state: absent
      ignore_errors: true

    - name: remove SNS topic
      sns_topic:
        name: '{{ config_sns_name }}'
        state: absent
      ignore_errors: true

    - name: remove S3 bucket
      s3_bucket:
        name: "{{ config_s3_bucket }}"
        state: absent
        force: true
      ignore_errors: true

    - name: remove KMS key
      kms_key:
        alias: "{{ config_kms_key }}"
        state: absent
      ignore_errors: true
