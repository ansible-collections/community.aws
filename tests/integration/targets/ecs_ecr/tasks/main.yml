---
- module_defaults:
    group/aws:
        region: "{{ aws_region }}"
        access_key: "{{ aws_access_key }}"
        secret_key: "{{ aws_secret_key }}"
        session_token: "{{ security_token | default(omit) }}"

  block:
    - set_fact:
        ecr_name: '{{ resource_prefix }}-ecr'

    - name: get ARN of calling user
      aws_caller_info:
      register: aws_caller_info

    - name: create KMS key for testing
      kms_key:
        alias: "{{ resource_prefix }}-ecr"
        description: a key used for testing ECR
        state: present
        enabled: yes
        key_spec: SYMMETRIC_DEFAULT
        key_usage: ENCRYPT_DECRYPT
        policy: "{{ lookup('template', 'kms_policy.j2') }}"
        tags:
          Name: "{{ resource_prefix }}-ecr"
          AnsibleTest: AnsibleTestVpc
      register: kms_test_key

    - name: When creating with check mode
      ecs_ecr:
        name: '{{ ecr_name }}'
      register: result
      check_mode: yes

    - name: it should skip, change and create
      assert:
        that:
          - result is skipped
          - result is changed
          - result.created


    - name: When specifying a registry that is inaccessible
      ecs_ecr:
        registry_id: 999999999999
        name: '{{ ecr_name }}'
      register: result
      ignore_errors: true

    - name: it should fail with an AccessDeniedException
      assert:
        that:
          - result is failed
          - '"AccessDeniedException" in result.msg'


    - name: When creating a repository
      ecs_ecr:
        name: '{{ ecr_name }}'
      register: result

    - name: it should change and create
      assert:
        that:
          - result is changed
          - result.created

    - name: it should have been configured as mutable by default
      assert:
        that:
          - result.repository.imageTagMutability == "MUTABLE"

    - name: it should use AES256 encryption by default
      assert:
        that:
          - result.repository.encryptionConfiguration.encryptionType == "AES256"

    - name: When pulling an existing repository that has no existing policy
      ecs_ecr:
        name: '{{ ecr_name }}'
      register: result

    - name: it should return the repo but without a policy and not create or change
      assert:
        that:
          - result.repository
          - '"policy" not in result'
          - not result.created
          - not result.changed

    - name: When creating a repository that already exists in check mode
      ecs_ecr:
        name: '{{ ecr_name }}'
      register: result
      check_mode: yes

    - name: it should not skip, should not change
      assert:
        that:
          - result is not skipped
          - result is not changed


    - name: When creating a repository that already exists
      ecs_ecr:
        name: '{{ ecr_name }}'
      register: result

    - name: it should not change
      assert:
        that:
          - result is not changed


    - name: When in check mode, and deleting a policy that does not exist
      ecs_ecr:
        name: '{{ ecr_name }}'
        purge_policy: yes
      register: result
      check_mode: yes

    - name: it should not skip and not change
      assert:
        that:
          - result is not skipped
          - result is not changed


    - name: When in check mode, setting policy on a repository that has no policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        policy: '{{ policy }}'
      register: result
      check_mode: yes

    - name: it should skip, change and not create
      assert:
        that:
          - result is skipped
          - result is changed
          - not result.created


    - name: When setting policy on a repository that has no policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        policy: '{{ policy }}'
      register: result

    - name: it should change and not create
      assert:
        that:
          - result is changed
          - not result.created

    - name: When pulling an existing repository that has an existing policy
      ecs_ecr:
        name: '{{ ecr_name }}'
      register: result

    - name: it should return the policy but not create or change
      assert:
        that:
          - '"policy" in result'
          - not result.created
          - not result.changed

    - name: When in check mode, and deleting a policy that exists
      ecs_ecr:
        name: '{{ ecr_name }}'
        purge_policy: yes
      register: result
      check_mode: yes

    - name: it should skip, change but not create
      assert:
        that:
          - result is skipped
          - result is changed
          - not result.created

    - name: When purging a policy that exists
      ecs_ecr:
        name: '{{ ecr_name }}'
        purge_policy: yes
      register: result

    - name: it should change and not create
      assert:
        that:
          - result is changed
          - not result.created


    - name: When setting a policy as a string
      ecs_ecr:
        name: '{{ ecr_name }}'
        policy: '{{ policy | to_json }}'
      register: result

    - name: it should change and not create
      assert:
        that:
          - result is changed
          - not result.created


    - name: When setting a policy to its current value
      ecs_ecr:
        name: '{{ ecr_name }}'
        policy: '{{ policy }}'
      register: result

    - name: it should not change
      assert:
        that:
          - result is not changed

    - name: When omitting policy on a repository that has a policy
      ecs_ecr:
        name: '{{ ecr_name }}'
      register: result

    - name: it should not change
      assert:
        that:
          - result is not changed

    - name: When specifying both policy and purge_policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        policy: '{{ policy }}'
        purge_policy: yes
      register: result
      ignore_errors: true

    - name: it should fail
      assert:
        that:
          - result is failed


    - name: When specifying invalid JSON for policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        policy: "Ceci n'est pas une JSON"
      register: result
      ignore_errors: true

    - name: it should fail
      assert:
        that:
          - result is failed


    - name: When in check mode, and purging a lifecycle policy that does not exists
      ecs_ecr:
        name: '{{ ecr_name }}'
        purge_lifecycle_policy: yes
      register: result
      check_mode: yes

    - name: it should not skip and not change
      assert:
        that:
          - not result is skipped
          - not result is changed


    - name: When in check mode, setting lifecyle policy on a repository that has no policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        lifecycle_policy: '{{ lifecycle_policy }}'
      register: result
      check_mode: yes

    - name: it should skip, change and not create
      assert:
        that:
          - result is skipped
          - result is changed
          - not result.created


    - name: When setting lifecycle policy on a repository that has no policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        lifecycle_policy: '{{ lifecycle_policy }}'
      register: result

    - name: it should change and not create
      assert:
        that:
          - result is changed
          - not result.created
          - '"lifecycle_policy" in result'
          - result.lifecycle_policy.rules|length == 1


    - name: When in check mode, and purging a lifecyle policy that exists
      ecs_ecr:
        name: '{{ ecr_name }}'
        purge_lifecycle_policy: yes
      register: result
      check_mode: yes

    - name: it should skip, change but not create
      assert:
        that:
          - result is skipped
          - result is changed
          - not result.created


    - name: When purging a lifecycle policy that exists
      ecs_ecr:
        name: '{{ ecr_name }}'
        purge_lifecycle_policy: yes
      register: result

    - name: it should change and not create
      assert:
        that:
          - result is changed
          - not result.created


    - name: When setting a lifecyle policy as a string
      ecs_ecr:
        name: '{{ ecr_name }}'
        lifecycle_policy: '{{ lifecycle_policy | to_json }}'
      register: result

    - name: it should change and not create
      assert:
        that:
          - result is changed
          - not result.created


    - name: When setting a lifecycle policy to its current value
      ecs_ecr:
        name: '{{ ecr_name }}'
        lifecycle_policy: '{{ lifecycle_policy }}'
      register: result

    - name: it should not change
      assert:
        that:
          - not result is changed


    - name: When omitting lifecycle policy on a repository that has a policy
      ecs_ecr:
        name: '{{ ecr_name }}'
      register: result

    - name: it should not change
      assert:
        that:
          - not result is changed


    - name: When specifying both lifecycle_policy and purge_lifecycle_policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        lifecycle_policy: '{{ lifecycle_policy }}'
        purge_lifecycle_policy: yes
      register: result
      ignore_errors: true

    - name: it should fail
      assert:
        that:
          - result is failed


    - name: When specifying invalid JSON for lifecycle policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        lifecycle_policy: "Ceci n'est pas une JSON"
      register: result
      ignore_errors: true

    - name: it should fail
      assert:
        that:
          - result is failed


    - name: When specifying an invalid document for lifecycle policy
      ecs_ecr:
        name: '{{ ecr_name }}'
        lifecycle_policy:
          rules:
            - invalid: "Ceci n'est pas une rule"
      register: result
      ignore_errors: true

    - name: it should fail
      assert:
        that:
          - result is failed


    - name: When in check mode, deleting a repository that exists
      ecs_ecr:
        name: '{{ ecr_name }}'
        state: absent
      register: result
      check_mode: yes

    - name: it should skip, change and not create
      assert:
        that:
          - result is skipped
          - result is changed
          - not result.created


    - name: When deleting a repository that exists
      ecs_ecr:
        name: '{{ ecr_name }}'
        state: absent
      register: result

    - name: it should change
      assert:
        that:
          - result is changed


    - name: When in check mode, deleting a repository that does not exist
      ecs_ecr:
        name: '{{ ecr_name }}'
        state: absent
      register: result
      check_mode: yes

    - name: it should not change
      assert:
        that:
          - result is not skipped
          - result is not changed


    - name: When deleting a repository that does not exist
      ecs_ecr:
        name: '{{ ecr_name }}'
        state: absent
      register: result

    - name: it should not change
      assert:
        that:
          - result is not changed

    - name: When creating an immutable repository
      ecs_ecr:
        name: '{{ ecr_name }}'
        image_tag_mutability: immutable
      register: result

    - name: it should change and create
      assert:
        that:
          - result is changed
          - result.created

    - name: it should have been configured as immutable
      assert:
        that:
          - result.repository.imageTagMutability == "IMMUTABLE"


    - name: When configuring an existing immutable repository to be mutable in check mode
      ecs_ecr:
        name: '{{ ecr_name }}'
        image_tag_mutability: mutable
      register: result
      check_mode: yes

    - name: it should skip, change and configured mutable
      assert:
        that:
          - result is skipped
          - result is changed
          - result.repository.imageTagMutability == "MUTABLE"

    - name: When configuring an existing immutable repository to be mutable
      ecs_ecr:
        name: '{{ ecr_name }}'
        image_tag_mutability: mutable
      register: result

    - name: it should change and configured mutable
      assert:
        that:
          - result is changed
          - result.repository.imageTagMutability == "MUTABLE"

    - name: When configuring an already mutable repository to be mutable
      ecs_ecr:
        name: '{{ ecr_name }}'
        image_tag_mutability: mutable
      register: result

    - name: it should not change
      assert:
        that:
          - result is not changed

    - name: enable scan on push in check mode
      ecs_ecr:
        name: '{{ ecr_name }}'
        scan_on_push: yes
      check_mode: yes
      register: result

    - name: it should change
      assert:
        that:
          - result is skipped
          - result is changed

    - name: enable scan on push
      ecs_ecr:
        name: '{{ ecr_name }}'
        scan_on_push: yes
      register: result

    - name: it should change
      assert:
        that:
          - result is changed
          - result.repository.imageScanningConfiguration.scanOnPush

    - name: verify enable scan on push
      ecs_ecr:
        name: '{{ ecr_name }}'
        scan_on_push: yes
      register: result

    - name: it should not change
      assert:
        that:
          - result is not changed
          - result.repository.imageScanningConfiguration.scanOnPush

    - name: disable scan on push
      ecs_ecr:
        name: '{{ ecr_name }}'
        scan_on_push: no
      register: result

    - name: it should change
      assert:
        that:
          - result is changed
          - not result.repository.imageScanningConfiguration.scanOnPush

    - name: When modifying the encryption setting of an existing repository
      ecs_ecr:
        name: '{{ ecr_name }}'
        encryption_configuration:
          encryption_type: KMS
          kms_key: '{{ kms_test_key.key_arn }}'
      register: result
      ignore_errors: true

    - name: it should fail
      assert:
        that:
          - result is failed

    - name: delete repository
      ecs_ecr:
        name: '{{ ecr_name }}'
        state: absent

    - name: When creating a repo using KMS encryption
      ecs_ecr:
        name: '{{ ecr_name }}'
        encryption_configuration:
          encryption_type: KMS
          kms_key: '{{ kms_test_key.key_arn }}'
      register: result

    - name: it should create the repo and use KMS encryption
      assert:
        that:
          - result is changed
          - result.repository.encryptionConfiguration.encryptionType == "KMS"

    - name: it should use the provided KMS key
      assert:
        that:
          - result.repository.encryptionConfiguration.kmsKey == '{{ kms_test_key.key_arn }}'

  always:

    - name: Delete lingering ECR repository
      ecs_ecr:
        name: '{{ ecr_name }}'
        state: absent

    - name: Delete KMS key
      kms_key:
        key_id: '{{ kms_test_key.key_arn }}'
        state: absent
