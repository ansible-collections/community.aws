---
  - name: set up elb_target_info test prerequisites
    module_defaults:
      group/aws:
        access_key: "{{ aws_access_key }}"
        secret_key: "{{ aws_secret_key }}"
        session_token: "{{ security_token | default(omit) }}"
        region: "{{ aws_region }}"
    collections:
      - amazon.aws

    block:

    # ============================================================

    - name:
      debug: msg="********** Setting up elb_target_info test dependencies **********"

    - name: set up testing VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: present
        cidr_block: 20.0.0.0/16
        tags:
          Name: "{{ resource_prefix }}-vpc"
          Description: "Created by ansible-test"
      register: vpc

    - name: set up testing internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: present
      register: igw

    - name: set up testing subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 20.0.0.0/18
        az: "{{ aws_region }}a"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
      register: subnet_1

    - name: set up testing subnet
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 20.0.64.0/18
        az: "{{ aws_region }}b"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
      register: subnet_2

    - name: create routing rules
      ec2_vpc_route_table:
        vpc_id: "{{ vpc.vpc.id }}"
        tags:
          created: "{{ resource_prefix }}-route"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ subnet_1.subnet.id }}"
          - "{{ subnet_2.subnet.id }}"
      register: route_table

    - name: create testing security group
      ec2_security_group:
        name: "{{ resource_prefix }}-sg"
        description: a security group for ansible tests
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: sg

    - name: set up testing target group (type=instance)
      register: alb_target_group
      elb_target_group:
        name: "{{ tg_name }}-inst"
        health_check_port: 80
        protocol: http
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
        target_type: instance
        # set this to 30 to test polling for changes, instead of having everything go out immediately
        deregistration_delay_timeout: 30
        tags:
          Description: "Created by {{ resource_prefix }}"

    - name: set up testing target group (type=ip)
      register: nlb_target_group
      elb_target_group:
        name: "{{ tg_name }}-ip"
        health_check_port: 80
        protocol: tcp
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
        # set this to 30 to test polling for changes, instead of having everything go out immediately
        deregistration_delay_timeout: 30
        target_type: ip
        tags:
          Description: "Created by {{ resource_prefix }}"

    - name: set up testing target group which will not be associated with any load balancers
      register: idle_target_group
      elb_target_group:
        name: "{{ tg_name }}-idle"
        health_check_port: 80
        protocol: tcp
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: present
        target_type: instance
        tags:
          Description: "Created by {{ resource_prefix }}"

    - name: set up ec2 instance to use as a target
      ec2_instance:
        name: "{{ resource_prefix }}-inst"
        security_group: "{{ sg.group_id }}"
        instance_type: t3.micro
        image_id: "{{ ec2_ami_id }}"
        vpc_subnet_id: "{{ subnet_2.subnet.id }}"
        network:
          assign_public_ip: true
        volumes: []
        wait: true
        ebs_optimized: false
        user_data: |
          #cloud-config
          package_upgrade: true
          package_update: true
          packages:
            - httpd
          runcmd:
            - "service httpd start"
            - echo "HELLO ANSIBLE" > /var/www/html/index.html
      register: ec2

    - set_fact:
        instance_id: "{{ ec2.instances[0].instance_id }}"

    - name: create an application load balancer
      elb_application_lb:
        name: "{{ lb_name }}-alb"
        security_groups:
          - "{{ sg.group_id }}"
        subnets:
          - "{{ subnet_1.subnet.id }}"
          - "{{ subnet_2.subnet.id }}"
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}-inst"
        state: present


    - name: create a network load balancer
      elb_network_lb:
        name: "{{ lb_name }}-nlb"
        subnets:
          - "{{ subnet_1.subnet.id }}"
          - "{{ subnet_2.subnet.id }}"
        listeners:
          - Protocol: TCP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}-ip"
        state: present

    - name: register with the ALB
      elb_target:
        target_group_name: "{{ tg_name }}-inst"
        target_id: "{{ instance_id }}"
        state: present
        target_status: "initial"

    - name: register with the NLB IP target group
      elb_target:
        target_group_name: "{{ tg_name }}-ip"
        target_id: "{{ ec2.instances[0].private_ip_address }}"
        state: present
        target_status: "initial"

    # ============================================================

    - debug: msg="********** Running elb_target_info integration tests **********"

    # ============================================================
    - name: gather facts
      elb_target_info:
        instance_id: "{{ instance_id }}"
      register: target_facts

    - assert:
        that:
          - "{{ alb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - "{{ nlb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - "{{ idle_target_group.target_group_arn not in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - (target_facts.instance_target_groups | length) == 2
        msg: "target facts showed the target in the right target groups"


    - name: register with unused target group
      elb_target:
        target_group_name: "{{ tg_name }}-idle"
        target_id: "{{ instance_id }}"
        state: present
        target_status: "unused"

    - name: gather facts again, including the idle group
      elb_target_info:
        instance_id: "{{ instance_id }}"
      register: target_facts

    - assert:
        that:
          - "{{ alb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - "{{ nlb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - "{{ idle_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - (target_facts.instance_target_groups | length) == 3
        msg: "target facts reflected the addition of the target to the idle group"

    - name: gather facts again, this time excluding the idle group
      elb_target_info:
        instance_id: "{{ instance_id }}"
        get_unused_target_groups: false
      register: target_facts

    - assert:
        that:
          - "{{ alb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - "{{ nlb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - "{{ idle_target_group.target_group_arn not in (target_facts.instance_target_groups | map(attribute='target_group_arn')) }}"
          - (target_facts.instance_target_groups | length) == 2
        msg: "target_facts.instance_target_groups did not gather unused target groups when variable was set"

    - name: register twice in the same target group
      elb_target:
        target_group_name: "{{ tg_name }}-ip"
        target_port: 22
        target_id: "{{ ec2.instances[0].private_ip_address }}"
        state: present
        target_status: "healthy"
        target_status_timeout: 400

    - name: gather facts
      elb_target_info:
        instance_id: "{{ instance_id }}"
        get_unused_target_groups: false
      register: target_facts

    - assert:
        that:
          - alb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn'))
          - nlb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn'))
          - (target_facts.instance_target_groups | length) == 2
          - (target_facts.instance_target_groups |
             selectattr('target_group_arn', 'equalto', nlb_target_group.target_group_arn) |
             map(attribute='targets') |
             flatten |
             list |
             length) == 2
        msg: "registering a target twice didn't affect the overall target group count, increased target count"

    - set_fact:
        original_target_groups: "{{ target_facts.instance_target_groups }}"

    - name: Deregister instance from all target groups
      elb_target:
          target_group_arn: "{{ item.0.target_group_arn }}"
          target_port: "{{ item.1.target_port }}"
          target_az: "{{ item.1.target_az }}"
          target_id: "{{ item.1.target_id }}"
          state: absent
          target_status: "draining"
      with_subelements:
        - "{{ original_target_groups }}"
        - "targets"

    - name: wait for all targets to deregister simultaneously
      elb_target_info:
        get_unused_target_groups: false
        instance_id: "{{ instance_id }}"
      register: target_facts
      until: (target_facts.instance_target_groups | length) == 0
      retries: 60
      delay: 10

    - name: reregister in elbv2s
      elb_target:
        target_group_arn: "{{ item.0.target_group_arn }}"
        target_port: "{{ item.1.target_port }}"
        target_az: "{{ item.1.target_az }}"
        target_id: "{{ item.1.target_id }}"
        state: present
        target_status: "initial"
      with_subelements:
        - "{{ original_target_groups }}"
        - "targets"

    # wait until all groups associated with this instance are 'healthy' or
    # 'unused'
    - name: wait for registration
      elb_target_info:
        get_unused_target_groups: false
        instance_id: "{{ instance_id }}"
      register: target_facts
      until: >
                (target_facts.instance_target_groups |
                 map(attribute='targets') |
                 flatten |
                 map(attribute='target_health') |
                 rejectattr('state', 'equalto', 'healthy') |
                 rejectattr('state', 'equalto', 'unused') |
                 list |
                 length) == 0
      retries: 61
      delay: 10

    - assert:
        that:
          - alb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn'))
          - nlb_target_group.target_group_arn in (target_facts.instance_target_groups | map(attribute='target_group_arn'))
          - (target_facts.instance_target_groups | length) == 2
          - (target_facts.instance_target_groups |
             selectattr('target_group_arn', 'equalto', nlb_target_group.target_group_arn) |
             map(attribute='targets') |
             flatten |
             list |
             length) == 2
        msg: "reregistration completed successfully"

    always:

    - name:
      debug: msg="********** Tearing down elb_target_info test dependencies **********"

    - name: remove ec2 instance
      ec2_instance:
        name: "{{ resource_prefix }}-inst"
        state: absent
        wait: True
      ignore_errors: true

    - name: remove application load balancer
      elb_application_lb:
        name: "{{ lb_name }}-alb"
        security_groups:
          - "{{ sg.group_id }}"
        subnets:
          - "{{ subnet_1.subnet.id }}"
          - "{{ subnet_2.subnet.id }}"
        listeners:
          - Protocol: HTTP
            Port: 80
            DefaultActions:
              - Type: forward
                TargetGroupName: "{{ tg_name }}-inst"
        state: absent
        wait: true
        wait_timeout: 200
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove NLB
      ignore_errors: true
      elb_network_lb:
        name: "{{ lb_name }}-nlb"
        state: absent

    - name: remove testing target groups
      elb_target_group:
        name: "{{ item }}"
        health_check_port: 80
        protocol: http
        port: 80
        vpc_id: '{{ vpc.vpc.id }}'
        state: absent
        target_type: instance
        tags:
          Description: "Created by {{ resource_prefix }}"
        wait: true
        wait_timeout: 200
      register: removed
      retries: 10
      until: removed is not failed
      with_items:
        - "{{ tg_name }}-idle"
        - "{{ tg_name }}-ip"
        - "{{ tg_name }}-inst"
      ignore_errors: true

    - name: remove testing security group
      ec2_security_group:
        state: absent
        name: "{{ resource_prefix }}-sg"
        description: a security group for ansible tests
        vpc_id: "{{ vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove routing rules
      ec2_vpc_route_table:
        state: absent
        lookup: id
        route_table_id: "{{ route_table.route_table.id }}"
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove testing subnet
      ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 20.0.0.0/18
        az: "{{ aws_region }}a"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove testing subnet
      ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ vpc.vpc.id }}"
        cidr: 20.0.64.0/18
        az: "{{ aws_region }}b"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove testing internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ vpc.vpc.id }}"
        state: absent
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: true

    - name: remove testing VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        state: absent
        cidr_block: 20.0.0.0/16
        tags:
          Name: "{{ resource_prefix }}-vpc"
          Description: "Created by ansible-test"
      register: removed
      retries: 10
      until: removed is not failed
      ignore_errors: True

    # ============================================================
