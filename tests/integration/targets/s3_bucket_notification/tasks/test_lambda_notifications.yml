---
- name: Run s3 notification lambda target tests
  block:
    ## Setup test resources
    - name: create minimal lambda role
      iam_role:
        name: "{{ lambda_role_name }}"
        assume_role_policy_document: '{{ lookup("file", "lambda-trust-policy.json") }}'
        create_instance_profile: false
        managed_policies:
          - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
      register: iam_role

    - name: wait 10 seconds for role to become available
      pause:
        seconds: 10
      when:
        - iam_role is changed

    - name: move lambda into place for archive module
      copy:
        src: mini_lambda.py
        dest: "{{ output_dir }}/mini_lambda.py"
        mode: preserve

    - name: bundle lambda into a zip
      register: function_res
      archive:
        format: zip
        path: "{{ output_dir }}/mini_lambda.py"
        dest: "{{ output_dir }}/mini_lambda.zip"

    - name: register bucket
      s3_bucket:
        name: "{{ bucket_name }}"
        state: present
      register: bucket_info

    - name: register lambda
      lambda:
        name: '{{ lambda_name }}'
        state: present
        role: "{{ lambda_role_name }}"
        runtime: python3.7
        zip_file: '{{function_res.dest}}'
        handler: lambda_function.lambda_handler
        memory_size: '128'
        timeout: '30'
      register: lambda_info

    ## Start lambda notification target tests
    - name: register notification without invoke permissions
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:*
          - s3:ObjectRemoved:*
        prefix: images/
        suffix: .jpg
      register: result
      ignore_errors: true

    - name: assert nice message returned
      assert:
        that:
          - result is failed
          - result.msg != 'MODULE FAILURE'

    - name: Add invocation permission of Lambda function on AWS
      lambda_policy:
        function_name: "{{ lambda_info.configuration.function_arn }}"
        statement_id: allow_lambda_invoke
        action: lambda:InvokeFunction
        principal: s3.amazonaws.com
        source_arn: arn:aws:s3:::{{ bucket_info.name }}

    - name: wait 10 seconds for policy update
      pause:
        seconds: 10

    - name: create s3 bucket notification - check_mode
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:*
          - s3:ObjectRemoved:*
        prefix: images/
        suffix: .jpg
      register: result
      check_mode: true

    - name: create s3 bucket notification - check_mode
      assert:
        that:
          - result is changed

    - name: create s3 bucket notification
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:*
          - s3:ObjectRemoved:*
        prefix: images/
        suffix: .jpg
      register: result

    - name: create s3 bucket notification
      assert:
        that:
          - result is changed
          - result.notification_configuration.lambda_function_configurations | length == 1
          - result.notification_configuration.lambda_function_configurations[0].id == event_name
          - result.notification_configuration.lambda_function_configurations[0].events | length == 2
          - result.notification_configuration.lambda_function_configurations[0].lambda_function_arn == lambda_info.configuration.function_arn

    - name: create s3 bucket notification - idempotency
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:*
          - s3:ObjectRemoved:*
        prefix: images/
        suffix: .jpg
      register: result

    - name: create s3 bucket notification - idempotency
      assert:
        that:
          - result is not changed

    - name: test mutually exclusive parameters
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:Post
        prefix: photos/
        suffix: .gif
        lambda_version: 0
        lambda_alias: 0
      register: result
      ignore_errors: true

    - name: test mutually exclusive parameters
      assert:
        that:
          - result is failed
          - "result.msg == 'parameters are mutually exclusive: lambda_alias|lambda_version'"

    - name: test configuration change on suffix
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:*
          - s3:ObjectRemoved:*
        prefix: images/
        suffix: .gif
      register: result

    - name: test configuration change on suffix
      assert:
        that:
          - result is changed

    - name: test configuration change on prefix
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:*
          - s3:ObjectRemoved:*
        prefix: photos/
        suffix: .gif
      register: result

    - name: test configuration change on prefix
      assert:
        that:
          - result is changed

    - name: test configuration change on new events added
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:*
          - s3:ObjectRemoved:*
          - s3:ObjectRestore:Post
        prefix: photos/
        suffix: .gif
      register: result

    - name: test configuration change on new events added
      assert:
        that:
          - result is changed
          - result.notification_configuration.lambda_function_configurations[0].events | length == 3

    - name: test that event order does not result in change
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectRestore:Post
          - s3:ObjectRemoved:*
          - s3:ObjectCreated:*
        prefix: photos/
        suffix: .gif
      register: result

    - name: test that event order does not matter
      assert:
        that:
          - result is not changed

    - name: test configuration change on events removed
      s3_bucket_notification:
        state: present
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
        lambda_function_arn: "{{ lambda_info.configuration.function_arn }}"
        events:
          - s3:ObjectCreated:Post
        prefix: photos/
        suffix: .gif
      register: result

    - name: test configuration change on events removed
      assert:
        that:
          - result is changed
          - result.notification_configuration.lambda_function_configurations[0].events | length == 1

    ## Test removal of event notification
    - name: test remove notification
      s3_bucket_notification:
        state: absent
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
      register: result

    - name: test remove notification
      assert:
        that:
          - result is changed

    - name: test that events is already removed
      s3_bucket_notification:
        state: absent
        event_name: "{{ event_name }}"
        bucket_name: "{{ bucket_name }}"
      register: result

    - name: test that events is already removed
      assert:
        that:
          - result is not changed
  always:
    - name: clean-up bucket
      s3_bucket:
        name: "{{ bucket_name }}"
        state: absent
      ignore_errors: true

    - name: clean-up lambda
      lambda:
        name: "{{ lambda_name }}"
        state: absent
      ignore_errors: true

    - name: cleam-up role
      iam_role:
        name: "{{ lambda_role_name }}"
        state: absent
      ignore_errors: true
