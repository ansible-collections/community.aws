---
- name: setup credentials and region
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"

  collections:
    - amazon.aws

  block:

    #NOTE: entire ASG setup is 'borrowed' from ec2_asg
    - name: Find AMI to use
      ec2_ami_info:
        owners: 'amazon'
        filters:
          name: '{{ ec2_ami_name }}'
      register: ec2_amis
    - name: "Set fact with latest AMI"
      run_once: yes
      vars:
        latest_ami: '{{ ec2_amis.images | sort(attribute="creation_date") | last }}'
    - set_fact:
        ec2_ami_image: '{{ ec2_amis.images[0].image_id }}'
  
    - name: load balancer name has to be less than 32 characters
      set_fact:
        load_balancer_name: "{{ item }}-lb"
      loop: "{{ resource_prefix | regex_findall('.{8}$') }}"
  
    # Set up the testing dependencies: VPC, subnet, security group, and two launch configurations
    - name: Create VPC for use in testing
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        cidr_block: 10.55.77.0/24
        tenancy: default
      register: testing_vpc
  
    - name: Create internet gateway for use in testing
      ec2_vpc_igw:
        vpc_id: "{{ testing_vpc.vpc.id }}"
        state: present
      register: igw
  
    - name: Create subnet for use in testing
      ec2_vpc_subnet:
        state: present
        vpc_id: "{{ testing_vpc.vpc.id }}"
        cidr: 10.55.77.0/24
        az: "{{ aws_region }}a"
        resource_tags:
          Name: "{{ resource_prefix }}-subnet"
      register: testing_subnet
  
    - name: create routing rules
      ec2_vpc_route_table:
        vpc_id: "{{ testing_vpc.vpc.id }}"
        tags:
          created: "{{ resource_prefix }}-route"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ testing_subnet.subnet.id }}"
  
    - name: create a security group with the vpc created in the ec2_setup
      ec2_group:
        name: "{{ resource_prefix }}-sg"
        description: a security group for ansible tests
        vpc_id: "{{ testing_vpc.vpc.id }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: sg
  
    - name: ensure launch configs exist
      ec2_lc:
        name: "{{ item }}"
        assign_public_ip: true
        image_id: "{{ ec2_ami_image }}"
        user_data: |
          package_upgrade: true
          package_update: true
          packages:
            - httpd
          runcmd:
            - "service httpd start"
        security_groups: "{{ sg.group_id }}"
        instance_type: t3.micro
      loop:
        - "{{ resource_prefix }}-lc"
        - "{{ resource_prefix }}-lc-2"
  
    - name: launch asg and do not wait for instances to be deemed healthy (no ELB)
      ec2_asg:
        name: "{{ resource_prefix }}-asg"
        launch_config_name: "{{ resource_prefix }}-lc"
        desired_capacity: 1
        min_size: 1
        max_size: 1
        vpc_zone_identifier: "{{ testing_subnet.subnet.id }}"
        wait_for_instances: no
        state: present
      register: output
  
    - assert:
        that:
        - "output.viable_instances == 0"
  
  # ============================================================
  # ============================================================
 
    - name: test invalid cancelation - V1 - (pre-refresh)
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "canceled"
      ignore_errors: yes
      register: result

    - assert:
        that:
        - "'Failed to cancel InstanceRefresh: An error occurred (ActiveInstanceRefreshNotFound) when calling the CancelInstanceRefresh operation: No in progress or pending Instance Refresh found for Auto Scaling group {{ resource_prefix }}-asg' == result.msg"
      ignore_errors: no

    - name: test starting a refresh with a valid ASG name
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "started"
      register: output

    - assert:
        that:
        - "'instance_refresh_id' in output"
      ignore_errors: no

    - name: test starting a refresh with a nonexistent ASG name
      ec2_asg_instance_refresh:
        name: "nonexistentname-asg"
        state: "started"
      ignore_errors: yes
      register: result

    - assert:
        that:
        - "'Failed to start InstanceRefresh: An error occurred (ValidationError) when calling the StartInstanceRefresh operation: AutoScalingGroup name not found' in result.msg"
      ignore_errors: no

    - name: test canceling a refresh with an ASG name
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "canceled"
      register: output

    - assert:
        that:
        - "'instance_refresh_id' in output"
      ignore_errors: no

    - name: test starting a refresh with an ASG name and preferences dict
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "started"
        preferences:
          min_healthy_percentage: 10
          instance_warmup: 10
      retries: 5
      register: output
      until: output is not failed

    - assert:
        that:
        - "'instance_refresh_id' in output"
      ignore_errors: no

    - name: re-test canceling a refresh with an ASG name
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "canceled"
      register: output

    - assert:
        that:
        - "'instance_refresh_id' in output"
      ignore_errors: no

    - name: test valid start - V1 - (with preferences missing instance_warmup)
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "started"
        preferences:
          min_healthy_percentage: 10
      ignore_errors: yes
      retries: 5
      register: output
      until: output is not failed

    - assert:
        that:
        - "'instance_refresh_id' in output"
      ignore_errors: no

    - name: re-test canceling a refresh with an ASG name
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "canceled"
      register: output

    - assert:
        that:
        - "'instance_refresh_id' in output"
      ignore_errors: no

    - name: test valid start - V2 - (with preferences missing min_healthy_percentage)
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "started"
        preferences:
          instance_warmup: 10
      retries: 5
      register: output
      until: output is not failed
      ignore_errors: yes

    - assert:
        that:
        - "'instance_refresh_id' in output"
      ignore_errors: no

    - name: test invalid cancelation - V2 - (with preferences)
      ec2_asg_instance_refresh:
        name: "{{ resource_prefix }}-asg"
        state: "canceled"
        preferences:
          min_healthy_percentage: 10
          instance_warmup: 10
      ignore_errors: yes
      register: result

    - assert:
        that:
        - "'can not pass preferences dict when canceling a refresh' in result.msg"
      ignore_errors: no

 
  always:

    - name: kill asg
      ec2_asg:
        name: "{{ resource_prefix }}-asg"
        state: absent
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
  
    # Remove the testing dependencies
  
    - name: remove the load balancer
      ec2_elb_lb:
        name: "{{ load_balancer_name }}"
        state: absent
        security_group_ids:
          - "{{ sg.group_id }}"
        subnets: "{{ testing_subnet.subnet.id }}"
        wait: yes
        connection_draining_timeout: 60
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
            ping_protocol: tcp
            ping_port: 80
            ping_path: "/"
            response_timeout: 5
            interval: 10
            unhealthy_threshold: 4
            healthy_threshold: 2
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
  
    - name: remove launch configs
      ec2_lc:
        name: "{{ resource_prefix }}-lc"
        state: absent
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
      loop:
        - "{{ resource_prefix }}-lc"
        - "{{ resource_prefix }}-lc-2"
  
    - name: delete launch template
      ec2_launch_template:
        name: "{{ resource_prefix }}-lt"
        state: absent
      register: del_lt
      retries: 10
      until: del_lt is not failed
      ignore_errors: true
  
    - name: remove the security group
      ec2_group:
        name: "{{ resource_prefix }}-sg"
        description: a security group for ansible tests
        vpc_id: "{{ testing_vpc.vpc.id }}"
        state: absent
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
  
    - name: remove routing rules
      ec2_vpc_route_table:
        state: absent
        vpc_id: "{{ testing_vpc.vpc.id }}"
        tags:
          created: "{{ resource_prefix }}-route"
        routes:
          - dest: 0.0.0.0/0
            gateway_id: "{{ igw.gateway_id }}"
        subnets:
          - "{{ testing_subnet.subnet.id }}"
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
  
    - name: remove internet gateway
      ec2_vpc_igw:
        vpc_id: "{{ testing_vpc.vpc.id }}"
        state: absent
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
  
    - name: remove the subnet
      ec2_vpc_subnet:
        state: absent
        vpc_id: "{{ testing_vpc.vpc.id }}"
        cidr: 10.55.77.0/24
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
  
    - name: remove the VPC
      ec2_vpc_net:
        name: "{{ resource_prefix }}-vpc"
        cidr_block: 10.55.77.0/24
        state: absent
      register: removed
      until: removed is not failed
      ignore_errors: yes
      retries: 10
