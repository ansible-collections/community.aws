---
- name: 'Setup AWS Module Defaults'
  module_defaults:
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
    kinesis_stream:
      # Number of shards is mandatory when state=present
      shards: 1

  block:
  # ============================================================
  # Set up some additional resources for later user

#  # KMS Keys
#  # Note: Because we're not a producer / consumer we don't actually need
#  # access to the keys
#  - name: 'Create KMS key 1'
#    aws_kms:
#      alias: '{{ kms_cmk_alias_1 }}'
#      state: present
#      enabled: yes
#    register: create_kms_1
#  - name: 'Create KMS key 2'
#    aws_kms:
#      alias: '{{ kms_cmk_alias_2 }}'
#      state: present
#      enabled: yes
#    register: create_kms_2
#  - name: 'Assert that we sucessfully created our keys'
#    assert:
#      that:
#      - create_kms_1 is success
#      - create_kms_2 is success
#  - name: 'Store the Key IDs for later'
#    set_fact:
#        kms_cmk_id_1: '{{ create_kms_1.key_id }}'
#        kms_cmk_arn_1: '{{ create_kms_1.key_arn }}'
#        kms_cmk_id_2: '{{ create_kms_2.key_id }}'
#        kms_cmk_arn_2: '{{ create_kms_2.key_arn }}'

  # ============================================================
  # Basic creation
  - name: 'Create a basic Kinesis stream (CHECK_MODE)'
    check_mode: yes
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
    register: result
  - name: 'Assert state is changed when first creating a stream (CHECK_MODE)'
    assert:
      that:
      - result is success
      - result is changed

  - name: 'Create a basic Kinesis stream'
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
    register: result
  - name: 'Assert state is changed when first creating a stream'
    assert:
      that:
      - result is success
      - result is changed
      - result.stream_arn.startswith('arn:aws:kinesis:')
      - result.stream_arn.endswith(':stream/' + kinesis_stream_name)
      - result.stream_status == 'ACTIVE'

  - name: 'Create a basic Kinesis stream - Idempotency (CHECK_MODE)'
    check_mode: yes
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
    register: result
  - name: 'Assert state is not changed when re-running the create (CHECK_MODE)'
    assert:
      that:
      - result is success
      - result is not changed
    # XXX BUG
    ignore_errors: yes

  - name: 'Create a basic Kinesis stream - Idempotency'
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
    register: result
  - name: 'Assert state is not changed when re-running the create'
    assert:
      that:
      - result is success
      - result is not changed
      - result.stream_arn.startswith('arn:aws:kinesis:')
      - result.stream_arn.endswith(':stream/' + kinesis_stream_name)
      - result.stream_status == 'ACTIVE'

  # ============================================================
  # Number of shards
  #
  - name: 'Change the number of shards (CHECK_MODE)'
    check_mode: yes
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      shards: 2
    register: result
  - name: 'Assert state is changed when changing the number of shards (CHECK_MODE)'
    assert:
      that:
      - result is success
      - result is changed

  - name: 'Change the number of shards'
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      shards: 2
    register: result
  - name: 'Assert state is changed when changing the number of shards'
    assert:
      that:
      - result is success
      - result is changed
      - result.stream_arn.startswith('arn:aws:kinesis:')
      - result.stream_arn.endswith(':stream/' + kinesis_stream_name)
      - result.stream_status == 'ACTIVE'

  - name: 'Change the number of shards - Idempotency (CHECK_MODE)'
    check_mode: yes
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      shards: 2
    register: result
  - name: 'Assert state is not changed when not changing the number of shards (CHECK_MODE)'
    assert:
      that:
      - result is success
      - result is not changed
    # XXX BUG
    ignore_errors: yes

  - name: 'Change the number of shards - Idempotency'
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      shards: 2
    register: result
  - name: 'Assert state is not changed when not changing the number of shards'
    assert:
      that:
      - result is success
      - result is not changed
      - result.stream_arn.startswith('arn:aws:kinesis:')
      - result.stream_arn.endswith(':stream/' + kinesis_stream_name)
      - result.stream_status == 'ACTIVE'

  # ============================================================

  - name: 'Reset the number of shards'
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      shards: 1
    register: result
  - name: 'Assert state is not changed when not changing the number of shards'
    assert:
      that:
      - result is success
      - result is not changed
      - result.stream_arn.startswith('arn:aws:kinesis:')
      - result.stream_arn.endswith(':stream/' + kinesis_stream_name)
      - result.stream_status == 'ACTIVE'

  # ============================================================
  # Encryption

  # Enable by ID
  # Idempotency by ID
  # Disable
  # Enable by Alias
  # Idempotency by Alias
  # Disable
  # Enable by ARN
  # Change by Alias
  # Disable
  # Disable Idempotency

  # ============================================================

  - name: 'Delete stream (CHECK_MODE)'
    check_mode: yes
    module_defaults: { kinesis_stream: {} }
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      state: absent
    register: result
  - name: 'Assert state is changed when deleting a stream (CHECK_MODE)'
    assert:
      that:
      - result is success
      - result is changed

  - name: 'Delete stream'
    module_defaults: { kinesis_stream: {} }
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      state: absent
    register: result
  - name: 'Assert state is changed when deleting a stream'
    assert:
      that:
      - result is success
      - result is changed

  - name: 'Delete stream - Idempotency (CHECK_MODE)'
    check_mode: yes
    module_defaults: { kinesis_stream: {} }
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      state: absent
    register: result
  - name: 'Assert state is not changed when deleting a stream that was previously deleted (CHECK_MODE)'
    assert:
      that:
      - result is success
      - result is not changed
    # XXX BUG
    ignore_errors: yes

  - name: 'Delete stream - Idempotency'
    module_defaults: { kinesis_stream: {} }
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      state: absent
    register: result
  - name: 'Assert state is not changed when deleting a stream that was previously deleted'
    assert:
      that:
      - result is success
      - result is not changed

  always:
  # ============================================================
  - name: 'Ensure Kinesis stream is gone'
    ignore_errors: yes
    kinesis_stream:
      name: '{{ kinesis_stream_name }}'
      state: absent

  - name: 'Delete the KMS keys'
    ignore_errors: yes
    aws_kms:
      state: absent
      alias: '{{ item }}'
    loop:
    - '{{ kms_cmk_alias_1 }}'
    - '{{ kms_cmk_alias_2 }}'
