---
- name: run aws_glue_job integration tests
  module_defaults:
    group/aws:
      aws_access_key: "{{ aws_access_key }}"
      aws_secret_key: "{{ aws_secret_key }}"
      security_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"
      purge_tags: no

  block:
    
    # integration test setup
    - name: create aws glue iam role for integration tests
      iam_role:
        name: '{{ glue_role_name }}'
        description: IAM role needed for aws_glue_job integration tests.
        assume_role_policy_document: "{{ lookup('file', 'policy.json') }}"
        state: present

    # resource creation 
    - name: test create glue job
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        state: present
      register: result

    - assert:
        that:
          - result.changed
          - result.arn is defined
          - "result.arn | regex_search('^arn:aws:glue:([a-zA-Z0-9\\-]+):([0-9]+):job/{{ glue_job_name }}$')"
    
    # resource creation idempotence
    - name: test idempotence when creating same glue job
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        state: present
      register: result

    - assert:
        that: 
          - not result.changed
    
    # resource modification - tags
    - name: test update glue job - add tags
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        tags:
          Environment: IntegrationTest
        state: present
      register: result

    - assert:
        that:
          - result.changed 
          - result.tags is defined
          - result.tags.Environment == 'IntegrationTest'
          - ((result.tags | dict2items) | length) == 1

    - name: test update glue job - add tags - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        tags:
          Environment: IntegrationTest
        state: present
      register: result

    - assert:
        that:
          - not result.changed
    
    - name: test update glue job - update tags w/o purge
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        purge_tags: no
        tags:
          AnotherTag: foobar
          YetAnotherTag: hello_world
        state: present
      register: result

    - assert:
        that:
          - result.changed 
          - result.tags is defined
          - result.tags.Environment == 'IntegrationTest'
          - result.tags.AnotherTag == 'foobar'
          - result.tags.YetAnotherTag == 'hello_world'
          - ((result.tags | dict2items) | length) == 3

    - name: test update glue job - update tags w/o purge - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        purge_tags: no
        tags:
          AnotherTag: foobar
          YetAnotherTag: hello_world
        state: present
      register: result

    - assert:
        that:
          - not result.changed 

    - name: test update glue job - update tags w/ purge
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        purge_tags: yes
        tags:
          Environment: IntegrationTest2
          AnotherTag: foobar
        state: present
      register: result

    - assert:
        that:
          - result.changed 
          - result.tags is defined
          - result.tags.Environment == 'IntegrationTest2'
          - result.tags.AnotherTag == 'foobar'
          - ((result.tags | dict2items) | length) == 2
    
    - name: test update glue job - remove tags
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        purge_tags: yes
        state: present
      register: result

    - assert:
        that:
          - result.changed 
          - result.tags is defined
          - ((result.tags | dict2items) | length) == 0

    - name: test update glue job - remove tags - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        purge_tags: yes
        state: present
      register: result

    - assert:
        that:
          - not result.changed 

    - name: test update glue job - updated default args - set
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        default_arguments: "{{ lookup('file', 'args.json') }}"
        role: '{{ glue_role_name }}'
        state: present
      register: result

    - assert:
        that:
          - result.changed
          - result.default_arguments is defined
          - ((result.default_arguments | dict2items) | length) == 2

    - name: test update glue job - updated default args - set - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        default_arguments: "{{ lookup('file', 'args.json') }}"
        role: '{{ glue_role_name }}'
        state: present
      register: result

    - assert:
        that:
          - not result.changed

    - name: test update glue job - updated default args - change
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        default_arguments: 
          '--job-bookmark-option': job-bookmark-disable
        role: '{{ glue_role_name }}'
        state: present
      register: result

    - assert:
        that:
          - result.changed
          - result.default_arguments is defined
          - ((result.default_arguments | dict2items) | length) == 1
          - "result.default_arguments['--job-bookmark-option'] == 'job-bookmark-disable'"

    - name: test update glue job - updated default args - change - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        default_arguments: 
          '--job-bookmark-option': job-bookmark-disable
        role: '{{ glue_role_name }}'
        state: present
      register: result

    - assert:
        that:
          - not result.changed

    - name: test update glue job - updated default args - remove
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        default_arguments: {}
        role: '{{ glue_role_name }}'
        state: present
      register: result

    - assert:
        that:
          - result.changed
          - result.default_arguments is defined
          - ((result.default_arguments | dict2items) | length) == 0

    - name: test update glue job - updated default args - remove - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        default_arguments: {}
        role: '{{ glue_role_name }}'
        state: present
      register: result

    - assert:
        that:
          - not result.changed

    - name: test update glue job - update max retries
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        max_retries: 2
        role: '{{ glue_role_name }}'
        state: present
      register: result
    
    - assert: 
        that:
          - result.changed
          - result.max_retries == 2

    - name: test update glue job - update max retries - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        max_retries: 2
        role: '{{ glue_role_name }}'
        state: present
      register: result
    
    - assert: 
        that:
          - not result.changed

    - name: test update glue job - updated maximum concurrent runs
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        max_concurrent_runs: 5
        role: '{{ glue_role_name }}'
        state: present
      register: result
    
    - assert: 
        that: 
          - result.changed
          - result.execution_property.max_concurrent_runs == 5

    - name: test update glue job - updated maximum concurrent runs - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        max_concurrent_runs: 5
        role: '{{ glue_role_name }}'
        state: present
      register: result
    
    - assert: 
        that: 
          - not result.changed
    
    - name: test update glue job - updated timeout
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        timeout: 5760
        state: present
      register: result

    - assert:
        that:
          - result.changed 
          - result.timeout == 5760

    - name: test update glue job - updated timeout - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        timeout: 5760
        state: present
      register: result

    - assert:
        that:
          - not result.changed

    - name: test update glue job - updated script location
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script2.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        state: present
      register: result
    
    - assert:
        that:
          - result.changed
          - result.command.script_location == 's3bucket/glue-job-script2.py'

    - name: test update glue job - updated script location - idempotence
      aws_glue_job:
        name: '{{ glue_job_name }}'
        command_script_location: s3bucket/glue-job-script2.py
        connections: [ my-test-connection ]
        role: '{{ glue_role_name }}'
        state: present
      register: result
    
    - assert:
        that:
          - not result.changed

    # resource deletion 
    - name: test delete glue job
      aws_glue_job:
        name: '{{ glue_job_name }}'
        state: absent
      register: result
    
    - assert:
        that:
          - result.changed
  
  always:
    - name: delete glue job
      aws_glue_job:
        name: '{{ glue_job_name }}'
        state: absent
    
    - name: cleanup iam roles used in tests
      iam_role:
        name: '{{ glue_role_name }}'
        state: absent