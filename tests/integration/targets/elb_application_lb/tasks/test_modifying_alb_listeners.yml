- block:

  - name: set connection information for all tasks
    set_fact:
      aws_connection_info: &aws_connection_info
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token }}"
        region: "{{ aws_region }}"
    no_log: yes

  - name: add a rule to the listener
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
          Rules:
            - Conditions:
                - Field: path-pattern
                  Values:
                    - '/test'
              Priority: '1'
              Actions:
                - TargetGroupName: "{{ tg_name }}"
                  Type: forward
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners[0].rules|length == 2

  - name: test replacing the rule with one with the same priority
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      purge_listeners: true
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
          Rules:
            - Conditions:
                - Field: path-pattern
                  Values:
                    - '/new'
              Priority: '1'
              Actions:
                - TargetGroupName: "{{ tg_name }}"
                  Type: forward
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners[0].rules|length == 2

  - name: test the rule will not be removed without purge_listeners
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - not alb.changed
        - alb.listeners[0].rules|length == 2

  - name: test a rule can be added and other rules will not be removed when purge_rules is no.
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      purge_rules: no
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
          Rules:
            - Conditions:
                - Field: path-pattern
                  Values:
                    - '/new'
              Priority: '2'
              Actions:
                - TargetGroupName: "{{ tg_name }}"
                  Type: forward
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners[0].rules|length == 3

  - name: add a rule that uses the host header condition to the listener
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      purge_rules: no
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
          Rules:
            - Conditions:
                - Field: host-header
                  Values:
                    - 'local.mydomain.com'
              Priority: '3'
              Actions:
                - TargetGroupName: "{{ tg_name }}"
                  Type: forward
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners[0].rules|length == 4
        - '{{ alb|community.general.json_query("listeners[].rules[].conditions[].host_header_config.values[]")|length  == 1 }}'

  - name: test replacing the rule that uses the host header condition with multiple host header conditions
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      purge_rules: no
      state: present
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
          Rules:
            - Conditions:
                - Field: host-header
                  Values:
                    - 'local.mydomain.com'
                    - 'alternate.mydomain.com'
              Priority: '3'
              Actions:
                - TargetGroupName: "{{ tg_name }}"
                  Type: forward
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners[0].rules|length == 4
        - '{{ alb|community.general.json_query("listeners[].rules[].conditions[].host_header_config.values[]")|length  == 2 }}'

  - name: remove the rule
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      purge_listeners: true
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
          Rules: []
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners[0].rules|length == 1

  - name: remove listener from ALB
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners: []
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - not alb.listeners

  - name: add the listener to the ALB
    elb_application_lb:
      name: "{{ alb_name }}"
      subnets: "{{ alb_subnets }}"
      security_groups: "{{ sec_group.group_id }}"
      state: present
      listeners:
        - Protocol: HTTP
          Port: 80
          DefaultActions:
            - Type: forward
              TargetGroupName: "{{ tg_name }}"
      <<: *aws_connection_info
    register: alb

  - assert:
      that:
        - alb.changed
        - alb.listeners|length == 1
        - alb.availability_zones|length == 2
