- name: set up lambda as elb_target
  block:
  - name: create zip to deploy lambda code
    archive:
      format: zip
      path: "{{ role_path }}/files/ansible_lambda_target.py"
      dest: "/tmp/lambda.zip"

  - name: create or update service-role for lambda
    iam_role:
      name: "{{ lambda_role_name }}"
      assume_role_policy_document: '{{ lookup("file", role_path + "/files/assume-role.json") }}'
      managed_policy:
        - "arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess"
    register: ROLE_ARN

  - name: when it is too fast, the role is not usable.
    pause:
      seconds: 10

  - name: deploy lambda.zip to ansible_lambda_target function
    lambda:
      name: "{{ lambda_name }}"
      state: present
      zip_file: /tmp/lambda.zip
      runtime: python3.7
      role: "{{ ROLE_ARN.arn }}"
      handler: ansible_lambda_target.lambda_handler
      timeout: 30
    register: lambda_function
    retries: 3
    delay: 15
    until: lambda_function.changed

  - name: create empty target group
    elb_target_group:
      name: "{{ elb_target_group_name }}"
      target_type: lambda
      state: present
      modify_targets: false
    register: elb_target_group

  - name: tg is created, state must be changed
    assert:
      that:
        - elb_target_group.changed

  - name: allow elb to invoke the lambda function
    lambda_policy:
      state: present
      function_name: "{{ lambda_name }}"
      version: "{{ lambda_function.configuration.version }}"
      statement_id: elb1
      action: lambda:InvokeFunction
      principal: elasticloadbalancing.amazonaws.com
      source_arn: "{{ elb_target_group.target_group_arn }}"

  - name: add lambda to elb target
    elb_target_group:
      name: "{{ elb_target_group_name }}"
      target_type: lambda
      state: present
      targets:
        - Id: "{{ lambda_function.configuration.function_arn }}"
    register: elb_target_group

  - name: target is updated, state must be changed
    assert:
      that:
        - elb_target_group.changed

  - name: re-add lambda to elb target (idempotency)
    elb_target_group:
      name: "{{ elb_target_group_name }}"
      target_type: lambda
      state: present
      targets:
        - Id: "{{ lambda_function.configuration.function_arn }}"
    register: elb_target_group

  - name: target is still the same, state must not be changed (idempotency)
    assert:
      that:
        - not elb_target_group.changed

  - name: remove lambda target from target group
    elb_target_group:
      name: "{{ elb_target_group_name }}"
      target_type: lambda
      state: absent
      targets: []
    register: elb_target_group

  - name: remove lambda target from target group
    assert:
      that:
        - elb_target_group.changed

  always:
  - name: remove elb target group
    elb_target_group:
      name: "{{ elb_target_group_name }}"
      target_type: lambda
      state: absent
    ignore_errors: true

  - name: remove lambda function
    lambda:
      name: "{{ lambda_name }}"
      state: absent
    ignore_errors: true

  - name: remove iam role for lambda
    iam_role:
      name: "{{ lambda_role_name }}"
      state: absent
    ignore_errors: true
