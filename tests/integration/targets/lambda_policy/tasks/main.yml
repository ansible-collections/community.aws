- name: Integration testing for lambda_policy
  module_defaults:
    group/aws:
      aws_access_key: '{{ aws_access_key }}'
      aws_secret_key: '{{ aws_secret_key }}'
      security_token: '{{ security_token | default(omit) }}'
      region: '{{ aws_region }}'
  collections:
    - community.general
    - amazon.aws

  block:
  - name: create minimal lambda role
    iam_role:
      name: '{{ lambda_role_name }}'
      assume_role_policy_document: '{{ lookup("file", "minimal_trust_policy.json") }}'
      create_instance_profile: false
      managed_policies:
      - 'arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess'
    register: iam_role
  - name: wait 10 seconds for role to become available
    pause:
      seconds: 10
    when: iam_role.changed

  - name: test with no parameters
    module_defaults: { group/aws: {} }
    lambda_policy: null
    register: result
    ignore_errors: true
  - name: assert failure when called with no parameters
    assert:
      that:
      - result.failed
      - 'result.msg.startswith("missing required arguments: ")'
  - name: test with all required dummy parameters but no region
    module_defaults: { group/aws: {} }
    lambda_policy:
      statement_id: dummy
      principal: api_fakeway
      action: fake:do_something_fake
      function_name: dummy_fake_function
    ignore_errors: true
    register: result
  - name: assert failure and appropriate message when called without region
    assert:
      that:
      - result.failed
      - '"requires a region and none was found" in result.msg'
  - name: test exceptions generated by forcing bad ec2 url
    module_defaults: { group/aws: {} }
    lambda_policy:
      function_name: '{{ lambda_function_name }}'
      state: present
      statement_id: api-gateway-invoke-lambdas
      action: lambda:InvokeFunction
      principal: apigateway.amazonaws.com
      source_arn: arn:aws:execute-api:no-north-0:1234567:*/*
      ec2_url: https://noexist.example.com
      ec2_region: no-north-0
      ec2_access_key: iamnotreallyanaccesskey
      ec2_secret_key: thisisabadsecretkey
      security_token: andthisisabadsecuritytoken
    register: result
    ignore_errors: true
  - name: assert lambda manages to respond as expected
    assert:
      that:
      - result is failed
      - result.msg != "MODULE FAILURE"
      - result.changed == False
  - name: move lambda into place for archive module
    copy:
      src: mini_http_lambda.py
      dest: '{{ output_dir }}/mini_http_lambda.py'
      mode: preserve
  - name: bundle lambda into a zip
    register: zip_res
    archive:
      format: zip
      path: '{{ output_dir }}/mini_http_lambda.py'
      dest: '{{ output_dir }}/mini_http_lambda.zip'
  - name: create minimal lambda role
    iam_role:
      name: ansible_lambda_role
      assume_role_policy_document: '{{ lookup(''file'', ''minimal_trust_policy.json'', convert_data=False) }}'
      create_instance_profile: false
    register: iam_role
  - name: wait 10 seconds for role to become available
    pause:
      seconds: 10
    when: iam_role.changed
  - name: test state=present - upload the lambda
    lambda:
      name: '{{lambda_function_name}}'
      runtime: python2.7
      handler: mini_http_lambda.handler
      role: '{{ lambda_role_name }}'
      zip_file: '{{zip_res.dest}}'
    register: lambda_result
  - name: get the aws account ID for use in future commands
    aws_caller_info: {}
    register: aws_caller_info
  - name: register lambda uri for use in template
    set_fact:
      mini_lambda_uri: arn:aws:apigateway:{{ aws_region }}:lambda:path/2015-03-31/functions/arn:aws:lambda:{{ aws_region }}:{{ aws_caller_info.account }}:function:{{ lambda_result.configuration.function_name }}/invocations
  - name: build API file
    template:
      src: endpoint-test-swagger-api.yml.j2
      dest: '{{output_dir}}/endpoint-test-swagger-api.yml.j2'
  - name: deploy new API
    aws_api_gateway:
      api_file: '{{output_dir}}/endpoint-test-swagger-api.yml.j2'
      stage: lambdabased
    register: create_result
  - name: register api id for later
    set_fact:
      api_id: '{{ create_result.api_id }}'
  - name: check API fails with permissions failure
    uri:
      url: https://{{create_result.api_id}}.execute-api.{{aws_region}}.amazonaws.com/lambdabased/mini/Mr_Ansible_Tester
    register: unauth_uri_result
    ignore_errors: true
  - name: assert internal server error due to permissions
    assert:
      that:
      - unauth_uri_result is failed
      - unauth_uri_result.status == 500
  - name: give api gateway execute permissions on lambda
    lambda_policy:
      function_name: '{{ lambda_function_name }}'
      state: present
      statement_id: api-gateway-invoke-lambdas
      action: lambda:InvokeFunction
      principal: apigateway.amazonaws.com
      source_arn: arn:aws:execute-api:{{ aws_region }}:{{ aws_caller_info.account }}:*/*
  - name: try again but with ARN
    lambda_policy:
      function_name: '{{ lambda_result.configuration.function_arn }}'
      state: present
      statement_id: api-gateway-invoke-lambdas
      action: lambda:InvokeFunction
      principal: apigateway.amazonaws.com
      source_arn: arn:aws:execute-api:{{ aws_region }}:{{ aws_caller_info.account }}:*/*
  - name: check API works with execute permissions
    uri:
      url: https://{{create_result.api_id}}.execute-api.{{aws_region}}.amazonaws.com/lambdabased/mini/Mr_Ansible_Tester
    register: uri_result
  - name: assert API works success
    assert:
      that:
      - uri_result
  - name: deploy new API
    aws_api_gateway:
      api_file: '{{output_dir}}/endpoint-test-swagger-api.yml.j2'
      stage: lambdabased
    register: create_result
    ignore_errors: true
  always:
  - name: destroy lambda for test cleanup if created
    lambda:
      name: '{{lambda_function_name}}'
      state: absent
    register: result
    ignore_errors: true
  - name: destroy API for test cleanup if created
    aws_api_gateway:
      state: absent
      api_id: '{{api_id}}'
    register: destroy_result
    ignore_errors: true
  - name: Clean up test role
    iam_role:
      name: '{{ lambda_role_name }}'
      state: absent
    ignore_errors: true
