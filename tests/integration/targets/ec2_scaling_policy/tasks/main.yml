---
# __Test Outline__
#
# __ec2_scaling_policy__
# create simplescaling scaling policy
# update simplescaling scaling policy
# remove simplescaling scaling policy
# create stepscaling scaling policy
# update stepscaling scaling policy
# remove stepscaling scaling policy

- module_defaults:
    group/aws:
        region: "{{ aws_region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        security_token: "{{ security_token | default(omit) }}"
  collections:
    - amazon.aws
  block:

    - name: Find AMI to use
      ec2_ami_info:
        owners: 'amazon'
        filters:
          name: '{{ ec2_ami_name }}'
      register: ec2_amis

    - name: Set fact with latest AMI
      vars:
        latest_ami: '{{ ec2_amis.images | sort(attribute="creation_date") | last }}'
      set_fact:
        scaling_policy_image_id: '{{ latest_ami.image_id }}'

    - name: create trivial launch_configuration
      ec2_lc:
        name: "{{ scaling_policy_lc_name }}"
        state: present
        instance_type: t3.nano
        image_id: "{{ scaling_policy_image_id }}"

    - name: create trivial ASG
      ec2_asg:
        name: "{{ scaling_policy_asg_name }}"
        state: present
        launch_config_name: "{{ scaling_policy_lc_name }}"
        min_size: 0
        max_size: 1
        desired_capacity: 0

    - name: Create Simple Scaling policy using implicit defaults
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_simplescaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: present
        adjustment_type: ChangeInCapacity
        scaling_adjustment: 1
      register: result

    - assert:
        that:
          - result.policy_name == "{{ resource_prefix }}_simplescaling_policy"
          - result.changed

    - name: Update Simple Scaling policy using explicit defaults
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_simplescaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: present
        adjustment_type: ChangeInCapacity
        scaling_adjustment: 1
        policy_type: SimpleScaling
      register: result

    - assert:
        that:
          - result.policy_name == "{{ resource_prefix }}_simplescaling_policy"
          - not result.changed

    - name: min_adjustment_step is ignored with ChangeInCapacity
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_simplescaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: present
        adjustment_type: ChangeInCapacity
        scaling_adjustment: 1
        min_adjustment_step: 1
        policy_type: SimpleScaling
      register: result

    - assert:
        that:
          - result.policy_name == "{{ resource_prefix }}_simplescaling_policy"
          - not result.changed
          - result.adjustment_type == "ChangeInCapacity"

    - name: Change Simple Scaling policy adjustment_type to PercentChangeInCapacity
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_simplescaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: present
        adjustment_type: PercentChangeInCapacity
        scaling_adjustment: 1
        min_adjustment_step: 1
        policy_type: SimpleScaling
      register: result

    - assert:
        that:
          - result.policy_name == "{{ resource_prefix }}_simplescaling_policy"
          - result.changed
          - result.adjustment_type == "PercentChangeInCapacity"

    - name: Remove Simple Scaling policy
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_simplescaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: absent
      register: result

    - assert:
        that:
          - result.changed

    - name: Create Step Scaling policy
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_stepscaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: present
        policy_type: StepScaling
        metric_aggregation: Maximum
        step_adjustments:
        - upper_bound: 20
          scaling_adjustment: 50
        - lower_bound: 20
          scaling_adjustment: 100
        adjustment_type: "PercentChangeInCapacity"
      register: result

    - assert:
        that:
          - result.policy_name == "{{ resource_prefix }}_stepscaling_policy"
          - result.changed

    - name: Add another step
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_stepscaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: present
        policy_type: StepScaling
        metric_aggregation: Maximum
        step_adjustments:
        - upper_bound: 20
          scaling_adjustment: 50
        - lower_bound: 20
          upper_bound: 40
          scaling_adjustment: 75
        - lower_bound: 40
          scaling_adjustment: 100
        adjustment_type: "PercentChangeInCapacity"
      register: result

    - assert:
        that:
          - result.policy_name == "{{ resource_prefix }}_stepscaling_policy"
          - result.changed
          - result.adjustment_type == "PercentChangeInCapacity"

    - name: Remove Step Scaling policy
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_stepscaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: absent
      register: result

    - assert:
        that:
          - result.changed

    - name: Remove Step Scaling policy (idemopotency)
      ec2_scaling_policy:
        name: "{{ resource_prefix }}_stepscaling_policy"
        asg_name: "{{ scaling_policy_asg_name }}"
        state: absent
      register: result

    - assert:
        that:
          - result is not changed
          - result is successful

  always:

    # ============================================================
    - name: Remove the scaling policies
      ec2_scaling_policy:
        name: "{{ item }}"
        state: absent
      register: result
      with_items:
        - "{{ resource_prefix }}_simplescaling_policy"
        - "{{ resource_prefix }}_stepscaling_policy"
      ignore_errors: yes

    - name: remove the ASG
      ec2_asg:
        name: "{{ scaling_policy_asg_name }}"
        state: absent
      ignore_errors: yes

    - name: remove the Launch Configuration
      ec2_lc:
        name: "{{ scaling_policy_lc_name }}"
        state: absent
      ignore_errors: yes
