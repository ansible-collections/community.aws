---
- name: Main test block

  module_defaults:
    group/aws:
      access_key: "{{ aws_access_key }}"
      secret_key: "{{ aws_secret_key }}"
      session_token: "{{ security_token | default(omit) }}"
      region: "{{ aws_region }}"

  block:
  - block:
    - name: Test creating SQS queue
      sqs_queue:
        name: "{{ resource_prefix }}{{ 1000 | random }}"
      register: create_result

    - name: Assert SQS queue created
      assert:
        that:
          - create_result.changed
          - create_result.region == "{{ aws_region }}"

    always:
    - name: Test deleting SQS queue
      sqs_queue:
        name: "{{ create_result.name }}"
        state: absent
      register: delete_result
      retries: 3
      delay: 3
      until: delete_result.changed

    - name: Assert SQS queue deleted
      assert:
        that:
          - delete_result.changed

    - name: Test delete SQS queue that doesn't exist
      sqs_queue:
        name: "{{ resource_prefix }}{{ 1000 | random }}"
        state: absent
      register: delete_result

    - name: Assert delete non-existant queue returns cleanly
      assert:
        that:
          - delete_result.changed == False

  - name: Test queue features
    block:
      - name: Test create queue with attributes
        sqs_queue:
          name: "{{ resource_prefix }}{{ 1000 | random }}"
          default_visibility_timeout: 900
          delivery_delay: 900
          # Test SSE
          kms_master_key_id: alias/aws/sqs
          maximum_message_size: 9009
          message_retention_period: 900
          receive_message_wait_time: 10
          policy:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action: "*"
        register: create_result

      - name: Assert queue created with configuration
        assert:
          that:
            - create_result.changed
            - create_result.default_visibility_timeout == 900
            - create_result.delivery_delay == 900
            - create_result.kms_master_key_id == "alias/aws/sqs"
            - create_result.maximum_message_size == 9009
            - create_result.message_retention_period == 900
            - create_result.receive_message_wait_time == 10
            - create_result.policy.Version == "2012-10-17"
            - create_result.policy.Statement[0].Effect == "Allow"
            - create_result.policy.Statement[0].Action == "*"

      - name: Test idempotentcy
        sqs_queue:
          name: "{{ create_result.name }}"
          default_visibility_timeout: 900
          delivery_delay: 900
          maximum_message_size: 9009
          message_retention_period: 900
          receive_message_wait_time: 10
          policy:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action: "*"
          kms_master_key_id: alias/aws/sqs
        register: create_result

      - name: Assert nothing changed
        assert:
          that:
            - not create_result.changed

      - name: Test update
        sqs_queue:
          name: "{{ create_result.name }}"
          default_visibility_timeout: 899
          delivery_delay: 899
          maximum_message_size: 9008
          message_retention_period: 899
          receive_message_wait_time: 9
          policy:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action: "*"
        register: create_result

      - name: Assert queue updated with configuration
        assert:
          that:
            - create_result.changed
            - create_result.default_visibility_timeout == 899
            - create_result.delivery_delay == 899
            - create_result.kms_master_key_id == "alias/aws/sqs"
            - create_result.maximum_message_size == 9008
            - create_result.message_retention_period == 899
            - create_result.receive_message_wait_time == 9
            - create_result.policy.Version == "2012-10-17"
            - create_result.policy.Statement[0].Effect == "Allow"
            - create_result.policy.Statement[0].Action == "*"
    always:
      - name: Cleaning up queue
        sqs_queue:
          name: "{{ create_result.name }}"
          state: absent
        register: delete_result
        retries: 3
        delay: 3
        until: delete_result.changed

  - name: Test queue with redrive
    block:
      - name: Creating dead letter queue
        sqs_queue:
          name: "{{ resource_prefix }}{{ 1000 | random }}"
        register: dead_letter_queue

      - name: Test create queue with redrive_policy
        sqs_queue:
          name: "{{ resource_prefix }}{{ 1000 | random }}"
          redrive_policy:
            maxReceiveCount: 5
            deadLetterTargetArn: "{{ dead_letter_queue.queue_arn }}"
        register: create_result

      - name: Assert queue created with configuration
        assert:
          that:
            - create_result.changed
    always:
      - name: Cleaning up queue
        sqs_queue:
          name: "{{ item.name }}"
          state: absent
        register: delete_result
        retries: 3
        delay: 3
        with_items:
          - { name: "{{ create_result.name }}" }
          - { name: "{{ dead_letter_queue.name }}" }

  - name: Test FIFO queue
    block:
      - name: Creating FIFO queue
        sqs_queue:
          name: "{{ resource_prefix }}{{ 1000 | random }}"
          queue_type: fifo
          content_based_deduplication: yes
        register: create_result

      - name: Assert queue created with configuration
        assert:
          that:
            - create_result.changed

      - name: Update FIFO queue
        sqs_queue:
          name: "{{ resource_prefix }}{{ 1000 | random }}"
          queue_type: fifo
          content_based_deduplication: yes
          fifo_throughput_limit: perMessageGroupId
          deduplication_scope: messageGroup
        register: update_result

      - name: Assert queue updated with configuration
        assert:
          that:
            - update_result.changed

    always:
      - name: Cleaning up queue
        sqs_queue:
          name: "{{ item.name }}"
          state: absent
        register: delete_result
        retries: 3
        delay: 3
        with_items:
          - { name: "{{ create_result.name }}" }
